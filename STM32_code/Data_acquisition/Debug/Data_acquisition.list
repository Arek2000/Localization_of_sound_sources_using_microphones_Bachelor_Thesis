
Data_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009464  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e4  080095e4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080095e4  080095e4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095e4  080095e4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080095ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f5c  2000017c  08009768  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040d8  08009768  000240d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016db3  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003897  00000000  00000000  00036f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  0003bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba90  00000000  00000000  0003d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cb4  00000000  00000000  00058be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095dfc  00000000  00000000  0007189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  001076e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009558 	.word	0x08009558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08009558 	.word	0x08009558

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc30 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9a0 	bl	800049c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f980 	bl	8000460 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f876 	bl	8000250 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000164:	f000 f906 	bl	8000374 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000168:	f000 f8d0 	bl	800030c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800016c:	f008 fd2c 	bl	8008bc8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f94c 	bl	800040c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000174:	4804      	ldr	r0, [pc, #16]	; (8000188 <main+0x3c>)
 8000176:	f003 ff5b 	bl	8004030 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, DMA_ADC_BUF);
 800017a:	f641 12c8 	movw	r2, #6600	; 0x19c8
 800017e:	4903      	ldr	r1, [pc, #12]	; (800018c <main+0x40>)
 8000180:	4803      	ldr	r0, [pc, #12]	; (8000190 <main+0x44>)
 8000182:	f000 fd51 	bl	8000c28 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000186:	e7fe      	b.n	8000186 <main+0x3a>
 8000188:	20000264 	.word	0x20000264
 800018c:	200002f0 	.word	0x200002f0
 8000190:	20000198 	.word	0x20000198

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	; 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f009 f9d0 	bl	8009548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f003 f97c 	bl	80034e8 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 f9f5 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fbe8 	bl	80039ec <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000222:	f000 f9df 	bl	80005e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000226:	2312      	movs	r3, #18
 8000228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800022a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800022e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000230:	2300      	movs	r3, #0
 8000232:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fd70 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000242:	f000 f9cf 	bl	80005e4 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3750      	adds	r7, #80	; 0x50
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <MX_ADC1_Init+0xb4>)
 8000262:	4a29      	ldr	r2, [pc, #164]	; (8000308 <MX_ADC1_Init+0xb8>)
 8000264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000266:	4b27      	ldr	r3, [pc, #156]	; (8000304 <MX_ADC1_Init+0xb4>)
 8000268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800026c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800026e:	4b25      	ldr	r3, [pc, #148]	; (8000304 <MX_ADC1_Init+0xb4>)
 8000270:	2201      	movs	r2, #1
 8000272:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <MX_ADC1_Init+0xb4>)
 8000276:	2200      	movs	r2, #0
 8000278:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027a:	4b22      	ldr	r3, [pc, #136]	; (8000304 <MX_ADC1_Init+0xb4>)
 800027c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000280:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <MX_ADC1_Init+0xb4>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <MX_ADC1_Init+0xb4>)
 800028a:	2203      	movs	r2, #3
 800028c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028e:	481d      	ldr	r0, [pc, #116]	; (8000304 <MX_ADC1_Init+0xb4>)
 8000290:	f000 fbf2 	bl	8000a78 <HAL_ADC_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800029a:	f000 f9a3 	bl	80005e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80002a6:	2305      	movs	r3, #5
 80002a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4815      	ldr	r0, [pc, #84]	; (8000304 <MX_ADC1_Init+0xb4>)
 80002b0:	f000 fda2 	bl	8000df8 <HAL_ADC_ConfigChannel>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002ba:	f000 f993 	bl	80005e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002be:	2306      	movs	r3, #6
 80002c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4619      	mov	r1, r3
 80002ce:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_ADC1_Init+0xb4>)
 80002d0:	f000 fd92 	bl	8000df8 <HAL_ADC_ConfigChannel>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80002da:	f000 f983 	bl	80005e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002de:	2307      	movs	r3, #7
 80002e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002e2:	2303      	movs	r3, #3
 80002e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <MX_ADC1_Init+0xb4>)
 80002ec:	f000 fd84 	bl	8000df8 <HAL_ADC_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80002f6:	f000 f975 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000198 	.word	0x20000198
 8000308:	40012400 	.word	0x40012400

0800030c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <MX_SPI2_Init+0x60>)
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <MX_SPI2_Init+0x64>)
 8000314:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_SPI2_Init+0x60>)
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_SPI2_Init+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_SPI2_Init+0x60>)
 8000324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000328:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_SPI2_Init+0x60>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_SPI2_Init+0x60>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <MX_SPI2_Init+0x60>)
 8000338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800033c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_SPI2_Init+0x60>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_SPI2_Init+0x60>)
 8000346:	2200      	movs	r2, #0
 8000348:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_SPI2_Init+0x60>)
 800034c:	2200      	movs	r2, #0
 800034e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_SPI2_Init+0x60>)
 8000352:	220a      	movs	r2, #10
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_SPI2_Init+0x60>)
 8000358:	f003 fd96 	bl	8003e88 <HAL_SPI_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8000362:	f000 f93f 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	2000020c 	.word	0x2000020c
 8000370:	40003800 	.word	0x40003800

08000374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000388:	463b      	mov	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <MX_TIM3_Init+0x90>)
 8000392:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <MX_TIM3_Init+0x94>)
 8000394:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_TIM3_Init+0x90>)
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_TIM3_Init+0x90>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 120-1;
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_TIM3_Init+0x90>)
 80003a4:	2277      	movs	r2, #119	; 0x77
 80003a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <MX_TIM3_Init+0x90>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_TIM3_Init+0x90>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003b4:	4813      	ldr	r0, [pc, #76]	; (8000404 <MX_TIM3_Init+0x90>)
 80003b6:	f003 fdeb 	bl	8003f90 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80003c0:	f000 f910 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_TIM3_Init+0x90>)
 80003d2:	f003 ff87 	bl	80042e4 <HAL_TIM_ConfigClockSource>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80003dc:	f000 f902 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003e0:	2320      	movs	r3, #32
 80003e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_TIM3_Init+0x90>)
 80003ee:	f004 f963 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80003f8:	f000 f8f4 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000264 	.word	0x20000264
 8000408:	40000400 	.word	0x40000400

0800040c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <MX_USART2_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_USART2_UART_Init+0x4c>)
 8000444:	f004 f9a8 	bl	8004798 <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f8c9 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200002ac 	.word	0x200002ac
 800045c:	40004400 	.word	0x40004400

08000460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_DMA_Init+0x38>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <MX_DMA_Init+0x38>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_DMA_Init+0x38>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	200b      	movs	r0, #11
 8000484:	f000 ff89 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000488:	200b      	movs	r0, #11
 800048a:	f000 ffa2 	bl	80013d2 <HAL_NVIC_EnableIRQ>

}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b0:	4b37      	ldr	r3, [pc, #220]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a36      	ldr	r2, [pc, #216]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0310 	and.w	r3, r3, #16
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c8:	4b31      	ldr	r3, [pc, #196]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a30      	ldr	r2, [pc, #192]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004ce:	f043 0320 	orr.w	r3, r3, #32
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0320 	and.w	r3, r3, #32
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a2a      	ldr	r2, [pc, #168]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a24      	ldr	r2, [pc, #144]	; (8000590 <MX_GPIO_Init+0xf4>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_GPIO_Init+0xf4>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0308 	and.w	r3, r3, #8
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	481f      	ldr	r0, [pc, #124]	; (8000594 <MX_GPIO_Init+0xf8>)
 8000516:	f001 fae9 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <MX_GPIO_Init+0xfc>)
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	481b      	ldr	r0, [pc, #108]	; (800059c <MX_GPIO_Init+0x100>)
 8000530:	f001 f958 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000534:	2320      	movs	r3, #32
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2302      	movs	r3, #2
 8000542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <MX_GPIO_Init+0xf8>)
 800054c:	f001 f94a 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000550:	2302      	movs	r3, #2
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_GPIO_Init+0xfc>)
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	480f      	ldr	r0, [pc, #60]	; (80005a0 <MX_GPIO_Init+0x104>)
 8000564:	f001 f93e 	bl	80017e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	2007      	movs	r0, #7
 800056e:	f000 ff14 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000572:	2007      	movs	r0, #7
 8000574:	f000 ff2d 	bl	80013d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2100      	movs	r1, #0
 800057c:	2028      	movs	r0, #40	; 0x28
 800057e:	f000 ff0c 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000582:	2028      	movs	r0, #40	; 0x28
 8000584:	f000 ff25 	bl	80013d2 <HAL_NVIC_EnableIRQ>

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800
 8000598:	10210000 	.word	0x10210000
 800059c:	40011000 	.word	0x40011000
 80005a0:	40010c00 	.word	0x40010c00

080005a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(adcResultsDMA, sizeof(adcResultsDMA));
	CDC_Transmit_FS(adcResultsDMA + DMA_ADC_BUF/2, sizeof(adcResultsDMA)/2);
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80005ae:	f641 11c8 	movw	r1, #6600	; 0x19c8
 80005b2:	4618      	mov	r0, r3
 80005b4:	f008 fbc6 	bl	8008d44 <CDC_Transmit_FS>
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, DMA_ADC_BUF);
	//HAL_ADC_Start_DMA(&hadc1, (uint16_t *)&adcResultsDMA, sizeof(adcResultsDMA));
	//conversion_number --;
	//offset ++;
	//HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20001cb8 	.word	0x20001cb8

080005c4 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(adcResultsDMA, sizeof(adcResultsDMA)/2);
 80005cc:	f641 11c8 	movw	r1, #6600	; 0x19c8
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80005d2:	f008 fbb7 	bl	8008d44 <CDC_Transmit_FS>
	//adcConversionComplete = 1;
	//HAL_UART_Transmit_DMA(&huart2, (uint16_t *)&adcResultsDMA, sizeof(adcResultsDMA));
	//HAL_UART_Transmit_DMA(&huart2, (uint16_t *)&adcResultsDMA + sizeof(adcResultsDMA)/2, sizeof(adcResultsDMA)/2);
	//adcConversionComplete = 1;
	//conversion_number ++;
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200002f0 	.word	0x200002f0

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_MspInit+0x5c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <HAL_MspInit+0x5c>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_MspInit+0x5c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x5c>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_MspInit+0x5c>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_MspInit+0x5c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_MspInit+0x60>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_MspInit+0x60>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000
 8000650:	40010000 	.word	0x40010000

08000654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a33      	ldr	r2, [pc, #204]	; (800073c <HAL_ADC_MspInit+0xe8>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d15f      	bne.n	8000734 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000674:	4b32      	ldr	r3, [pc, #200]	; (8000740 <HAL_ADC_MspInit+0xec>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a31      	ldr	r2, [pc, #196]	; (8000740 <HAL_ADC_MspInit+0xec>)
 800067a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <HAL_ADC_MspInit+0xec>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <HAL_ADC_MspInit+0xec>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <HAL_ADC_MspInit+0xec>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <HAL_ADC_MspInit+0xec>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <HAL_ADC_MspInit+0xec>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a25      	ldr	r2, [pc, #148]	; (8000740 <HAL_ADC_MspInit+0xec>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <HAL_ADC_MspInit+0xec>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006bc:	23c0      	movs	r3, #192	; 0xc0
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	2303      	movs	r3, #3
 80006c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4619      	mov	r1, r3
 80006ca:	481e      	ldr	r0, [pc, #120]	; (8000744 <HAL_ADC_MspInit+0xf0>)
 80006cc:	f001 f88a 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006d0:	2330      	movs	r3, #48	; 0x30
 80006d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <HAL_ADC_MspInit+0xf4>)
 80006e0:	f001 f880 	bl	80017e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_ADC_MspInit+0xf8>)
 80006e6:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <HAL_ADC_MspInit+0xfc>)
 80006e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_ADC_MspInit+0xf8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_ADC_MspInit+0xf8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_ADC_MspInit+0xf8>)
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_ADC_MspInit+0xf8>)
 80006fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000702:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_ADC_MspInit+0xf8>)
 8000706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800070a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_ADC_MspInit+0xf8>)
 800070e:	2220      	movs	r2, #32
 8000710:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_ADC_MspInit+0xf8>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <HAL_ADC_MspInit+0xf8>)
 800071a:	f000 fe75 	bl	8001408 <HAL_DMA_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000724:	f7ff ff5e 	bl	80005e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_ADC_MspInit+0xf8>)
 800072c:	621a      	str	r2, [r3, #32]
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_ADC_MspInit+0xf8>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40012400 	.word	0x40012400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	40011000 	.word	0x40011000
 800074c:	200001c8 	.word	0x200001c8
 8000750:	40020008 	.word	0x40020008

08000754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <HAL_SPI_MspInit+0x8c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d131      	bne.n	80007d8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HAL_SPI_MspInit+0x94>)
 80007ba:	f001 f813 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_SPI_MspInit+0x94>)
 80007d4:	f001 f806 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40003800 	.word	0x40003800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010c00 	.word	0x40010c00

080007ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <HAL_TIM_Base_MspInit+0x44>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d113      	bne.n	8000826 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_TIM_Base_MspInit+0x48>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <HAL_TIM_Base_MspInit+0x48>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_TIM_Base_MspInit+0x48>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	201d      	movs	r0, #29
 800081c:	f000 fdbd 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000820:	201d      	movs	r0, #29
 8000822:	f000 fdd6 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40000400 	.word	0x40000400
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x70>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d123      	bne.n	80008a0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_UART_MspInit+0x74>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <HAL_UART_MspInit+0x74>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_UART_MspInit+0x74>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_UART_MspInit+0x74>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_UART_MspInit+0x74>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_UART_MspInit+0x74>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2302      	movs	r3, #2
 8000892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_UART_MspInit+0x78>)
 800089c:	f000 ffa2 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f8a1 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_CS_Pin);
 8000906:	2002      	movs	r0, #2
 8000908:	f001 f908 	bl	8001b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <DMA1_Channel1_IRQHandler+0x10>)
 8000916:	f000 fe31 	bl	800157c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200001c8 	.word	0x200001c8

08000924 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800092a:	f001 fa4a 	bl	8001dc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20003bcc 	.word	0x20003bcc

08000938 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <TIM3_IRQHandler+0x10>)
 800093e:	f003 fbc9 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000264 	.word	0x20000264

0800094c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000950:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000954:	f001 f8e2 	bl	8001b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098e:	f7ff ffe5 	bl	800095c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f008 fdb5 	bl	8009500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fbd9 	bl	800014c <main>
  bx lr
 800099a:	4770      	bx	lr
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80009a4:	080095ec 	.word	0x080095ec
  ldr r2, =_sbss
 80009a8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80009ac:	200040d8 	.word	0x200040d8

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x28>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 fcdd 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff fe0e 	bl	80005f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fcf5 	bl	80013ee <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f000 fcbd 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_IncTick+0x20>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20003680 	.word	0x20003680

08000a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20003680 	.word	0x20003680

08000a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e0be      	b.n	8000c18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fdcc 	bl	8000654 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 faed 	bl	800109c <ADC_ConversionStop_Disable>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8099 	bne.w	8000c06 <HAL_ADC_Init+0x18e>
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8095 	bne.w	8000c06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ae4:	f023 0302 	bic.w	r3, r3, #2
 8000ae8:	f043 0202 	orr.w	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7b1b      	ldrb	r3, [r3, #12]
 8000afe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b10:	d003      	beq.n	8000b1a <HAL_ADC_Init+0xa2>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d102      	bne.n	8000b20 <HAL_ADC_Init+0xa8>
 8000b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1e:	e000      	b.n	8000b22 <HAL_ADC_Init+0xaa>
 8000b20:	2300      	movs	r3, #0
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7d1b      	ldrb	r3, [r3, #20]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d119      	bne.n	8000b64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7b1b      	ldrb	r3, [r3, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	035a      	lsls	r2, r3, #13
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	e00b      	b.n	8000b64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	f043 0220 	orr.w	r2, r3, #32
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	f043 0201 	orr.w	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	430a      	orrs	r2, r1
 8000b76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_ADC_Init+0x1a8>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b94:	d003      	beq.n	8000b9e <HAL_ADC_Init+0x126>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d104      	bne.n	8000ba8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	051b      	lsls	r3, r3, #20
 8000ba6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_ADC_Init+0x1ac>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d10b      	bne.n	8000be4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f023 0303 	bic.w	r3, r3, #3
 8000bda:	f043 0201 	orr.w	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be2:	e018      	b.n	8000c16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f023 0312 	bic.w	r3, r3, #18
 8000bec:	f043 0210 	orr.w	r2, r3, #16
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	f043 0201 	orr.w	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c04:	e007      	b.n	8000c16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f043 0210 	orr.w	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	ffe1f7fd 	.word	0xffe1f7fd
 8000c24:	ff1f0efe 	.word	0xff1f0efe

08000c28 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a64      	ldr	r2, [pc, #400]	; (8000dd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d004      	beq.n	8000c4c <HAL_ADC_Start_DMA+0x24>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a63      	ldr	r2, [pc, #396]	; (8000dd4 <HAL_ADC_Start_DMA+0x1ac>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d106      	bne.n	8000c5a <HAL_ADC_Start_DMA+0x32>
 8000c4c:	4b60      	ldr	r3, [pc, #384]	; (8000dd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 80b3 	bne.w	8000dc0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d101      	bne.n	8000c68 <HAL_ADC_Start_DMA+0x40>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e0ae      	b.n	8000dc6 <HAL_ADC_Start_DMA+0x19e>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f9b9 	bl	8000fe8 <ADC_Enable>
 8000c76:	4603      	mov	r3, r0
 8000c78:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f040 809a 	bne.w	8000db6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a4e      	ldr	r2, [pc, #312]	; (8000dd4 <HAL_ADC_Start_DMA+0x1ac>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d105      	bne.n	8000cac <HAL_ADC_Start_DMA+0x84>
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d115      	bne.n	8000cd8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d026      	beq.n	8000d14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cd6:	e01d      	b.n	8000d14 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a39      	ldr	r2, [pc, #228]	; (8000dd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d004      	beq.n	8000cf8 <HAL_ADC_Start_DMA+0xd0>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a38      	ldr	r2, [pc, #224]	; (8000dd4 <HAL_ADC_Start_DMA+0x1ac>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d10d      	bne.n	8000d14 <HAL_ADC_Start_DMA+0xec>
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d007      	beq.n	8000d14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	f023 0206 	bic.w	r2, r3, #6
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d2c:	e002      	b.n	8000d34 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <HAL_ADC_Start_DMA+0x1b0>)
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <HAL_ADC_Start_DMA+0x1b4>)
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <HAL_ADC_Start_DMA+0x1b8>)
 8000d52:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f06f 0202 	mvn.w	r2, #2
 8000d5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d6c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6a18      	ldr	r0, [r3, #32]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	334c      	adds	r3, #76	; 0x4c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f000 fb9d 	bl	80014bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d90:	d108      	bne.n	8000da4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000da0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000da2:	e00f      	b.n	8000dc4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000db2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000db4:	e006      	b.n	8000dc4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000dbe:	e001      	b.n	8000dc4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012400 	.word	0x40012400
 8000dd4:	40012800 	.word	0x40012800
 8000dd8:	0800111f 	.word	0x0800111f
 8000ddc:	0800119b 	.word	0x0800119b
 8000de0:	080011b7 	.word	0x080011b7

08000de4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x20>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e0dc      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x1da>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d81c      	bhi.n	8000e62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b05      	subs	r3, #5
 8000e3a:	221f      	movs	r2, #31
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4019      	ands	r1, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b05      	subs	r3, #5
 8000e54:	fa00 f203 	lsl.w	r2, r0, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e60:	e03c      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d81c      	bhi.n	8000ea4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b23      	subs	r3, #35	; 0x23
 8000e7c:	221f      	movs	r2, #31
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4019      	ands	r1, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	3b23      	subs	r3, #35	; 0x23
 8000e96:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea2:	e01b      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b41      	subs	r3, #65	; 0x41
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b41      	subs	r3, #65	; 0x41
 8000ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d91c      	bls.n	8000f1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b1e      	subs	r3, #30
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4019      	ands	r1, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6898      	ldr	r0, [r3, #8]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b1e      	subs	r3, #30
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	e019      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6919      	ldr	r1, [r3, #16]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2207      	movs	r2, #7
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b10      	cmp	r3, #16
 8000f58:	d003      	beq.n	8000f62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5e:	2b11      	cmp	r3, #17
 8000f60:	d132      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d125      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d126      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d11a      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9a      	lsrs	r2, r3, #18
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x1b2>
 8000fb6:	e007      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f043 0220 	orr.w	r2, r3, #32
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40012400 	.word	0x40012400
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	431bde83 	.word	0x431bde83

08000fe8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d040      	beq.n	8001088 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <ADC_Enable+0xac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <ADC_Enable+0xb0>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	0c9b      	lsrs	r3, r3, #18
 8001022:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001024:	e002      	b.n	800102c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3b01      	subs	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f9      	bne.n	8001026 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001032:	f7ff fd17 	bl	8000a64 <HAL_GetTick>
 8001036:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001038:	e01f      	b.n	800107a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800103a:	f7ff fd13 	bl	8000a64 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d918      	bls.n	800107a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d011      	beq.n	800107a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	f043 0210 	orr.w	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e007      	b.n	800108a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d1d8      	bne.n	800103a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	431bde83 	.word	0x431bde83

0800109c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d12e      	bne.n	8001114 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010c6:	f7ff fccd 	bl	8000a64 <HAL_GetTick>
 80010ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010cc:	e01b      	b.n	8001106 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ce:	f7ff fcc9 	bl	8000a64 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d914      	bls.n	8001106 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10d      	bne.n	8001106 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	f043 0210 	orr.w	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e007      	b.n	8001116 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b01      	cmp	r3, #1
 8001112:	d0dc      	beq.n	80010ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001134:	2b00      	cmp	r3, #0
 8001136:	d127      	bne.n	8001188 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800114e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001152:	d115      	bne.n	8001180 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001158:	2b00      	cmp	r3, #0
 800115a:	d111      	bne.n	8001180 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d105      	bne.n	8001180 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	f043 0201 	orr.w	r2, r3, #1
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff fa0f 	bl	80005a4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001186:	e004      	b.n	8001192 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	4798      	blx	r3
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f7ff fa0b 	bl	80005c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	f043 0204 	orr.w	r2, r3, #4
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f7ff fe01 	bl	8000de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <__NVIC_EnableIRQ+0x34>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff90 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff2d 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff42 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff90 	bl	80012dc <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5f 	bl	8001288 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff35 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e043      	b.n	80014a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_DMA_Init+0xa8>)
 8001426:	4413      	add	r3, r2
 8001428:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_DMA_Init+0xac>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	009a      	lsls	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_DMA_Init+0xb0>)
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001452:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001456:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	bffdfff8 	.word	0xbffdfff8
 80014b4:	cccccccd 	.word	0xcccccccd
 80014b8:	40020000 	.word	0x40020000

080014bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_DMA_Start_IT+0x20>
 80014d8:	2302      	movs	r3, #2
 80014da:	e04a      	b.n	8001572 <HAL_DMA_Start_IT+0xb6>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d13a      	bne.n	8001564 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f938 	bl	8001788 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 020e 	orr.w	r2, r2, #14
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e00f      	b.n	8001552 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0204 	bic.w	r2, r2, #4
 8001540:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 020a 	orr.w	r2, r2, #10
 8001550:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e005      	b.n	8001570 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800156c:	2302      	movs	r3, #2
 800156e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001570:	7dfb      	ldrb	r3, [r7, #23]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2204      	movs	r2, #4
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d04f      	beq.n	8001644 <HAL_DMA_IRQHandler+0xc8>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d04a      	beq.n	8001644 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0204 	bic.w	r2, r2, #4
 80015ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a66      	ldr	r2, [pc, #408]	; (800176c <HAL_DMA_IRQHandler+0x1f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d029      	beq.n	800162a <HAL_DMA_IRQHandler+0xae>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a65      	ldr	r2, [pc, #404]	; (8001770 <HAL_DMA_IRQHandler+0x1f4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_IRQHandler+0xaa>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_DMA_IRQHandler+0x1f8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01a      	beq.n	8001620 <HAL_DMA_IRQHandler+0xa4>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a62      	ldr	r2, [pc, #392]	; (8001778 <HAL_DMA_IRQHandler+0x1fc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d012      	beq.n	800161a <HAL_DMA_IRQHandler+0x9e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a60      	ldr	r2, [pc, #384]	; (800177c <HAL_DMA_IRQHandler+0x200>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x98>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a5f      	ldr	r2, [pc, #380]	; (8001780 <HAL_DMA_IRQHandler+0x204>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <HAL_DMA_IRQHandler+0x92>
 8001608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160c:	e00e      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800160e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001612:	e00b      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001614:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001618:	e008      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800161a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161e:	e005      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	e002      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	e000      	b.n	800162c <HAL_DMA_IRQHandler+0xb0>
 800162a:	2304      	movs	r3, #4
 800162c:	4a55      	ldr	r2, [pc, #340]	; (8001784 <HAL_DMA_IRQHandler+0x208>)
 800162e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8094 	beq.w	8001762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001642:	e08e      	b.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2202      	movs	r2, #2
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d056      	beq.n	8001702 <HAL_DMA_IRQHandler+0x186>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d051      	beq.n	8001702 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10b      	bne.n	8001684 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020a 	bic.w	r2, r2, #10
 800167a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_DMA_IRQHandler+0x1f0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d029      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x166>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <HAL_DMA_IRQHandler+0x1f4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_IRQHandler+0x162>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <HAL_DMA_IRQHandler+0x1f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01a      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x15c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_DMA_IRQHandler+0x1fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x156>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_DMA_IRQHandler+0x200>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00a      	beq.n	80016cc <HAL_DMA_IRQHandler+0x150>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_DMA_IRQHandler+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d102      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x14a>
 80016c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c4:	e00e      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ca:	e00b      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	e008      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d6:	e005      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	e002      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016de:	2320      	movs	r3, #32
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_IRQHandler+0x168>
 80016e2:	2302      	movs	r3, #2
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <HAL_DMA_IRQHandler+0x208>)
 80016e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d034      	beq.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001700:	e02f      	b.n	8001762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2208      	movs	r2, #8
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d028      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020e 	bic.w	r2, r2, #14
 800172a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
    }
  }
  return;
 8001762:	bf00      	nop
 8001764:	bf00      	nop
}
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c
 8001784:	40020000 	.word	0x40020000

08001788 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d108      	bne.n	80017c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c6:	e007      	b.n	80017d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b08b      	sub	sp, #44	; 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e169      	b.n	8001acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f8:	2201      	movs	r2, #1
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8158 	bne.w	8001ac6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d05e      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001820:	4a98      	ldr	r2, [pc, #608]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d875      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001826:	4a98      	ldr	r2, [pc, #608]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d058      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 800182c:	4a96      	ldr	r2, [pc, #600]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d86f      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001832:	4a96      	ldr	r2, [pc, #600]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d052      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001838:	4a94      	ldr	r2, [pc, #592]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d869      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800183e:	4a94      	ldr	r2, [pc, #592]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d04c      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001844:	4a92      	ldr	r2, [pc, #584]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d863      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800184a:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d046      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001850:	4a90      	ldr	r2, [pc, #576]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d85d      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d82a      	bhi.n	80018b0 <HAL_GPIO_Init+0xcc>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d859      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <HAL_GPIO_Init+0x80>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	080018df 	.word	0x080018df
 8001868:	080018b9 	.word	0x080018b9
 800186c:	080018cb 	.word	0x080018cb
 8001870:	0800190d 	.word	0x0800190d
 8001874:	08001913 	.word	0x08001913
 8001878:	08001913 	.word	0x08001913
 800187c:	08001913 	.word	0x08001913
 8001880:	08001913 	.word	0x08001913
 8001884:	08001913 	.word	0x08001913
 8001888:	08001913 	.word	0x08001913
 800188c:	08001913 	.word	0x08001913
 8001890:	08001913 	.word	0x08001913
 8001894:	08001913 	.word	0x08001913
 8001898:	08001913 	.word	0x08001913
 800189c:	08001913 	.word	0x08001913
 80018a0:	08001913 	.word	0x08001913
 80018a4:	08001913 	.word	0x08001913
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018d5 	.word	0x080018d5
 80018b0:	4a79      	ldr	r2, [pc, #484]	; (8001a98 <HAL_GPIO_Init+0x2b4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b6:	e02c      	b.n	8001912 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e029      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	3304      	adds	r3, #4
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e024      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	3308      	adds	r3, #8
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e01f      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	330c      	adds	r3, #12
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e01a      	b.n	8001914 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e6:	2304      	movs	r3, #4
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e013      	b.n	8001914 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	611a      	str	r2, [r3, #16]
          break;
 80018fe:	e009      	b.n	8001914 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	615a      	str	r2, [r3, #20]
          break;
 800190a:	e003      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x130>
          break;
 8001912:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d801      	bhi.n	800191e <HAL_GPIO_Init+0x13a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_Init+0x13e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d802      	bhi.n	8001930 <HAL_GPIO_Init+0x14c>
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x152>
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	3b08      	subs	r3, #8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	210f      	movs	r1, #15
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80b1 	beq.w	8001ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800197c:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a40      	ldr	r2, [pc, #256]	; (8001aa4 <HAL_GPIO_Init+0x2c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_GPIO_Init+0x2c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00d      	beq.n	80019cc <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3e      	ldr	r2, [pc, #248]	; (8001aac <HAL_GPIO_Init+0x2c8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1e4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_GPIO_Init+0x1e0>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019d0:	2300      	movs	r3, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e2:	492f      	ldr	r1, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	492c      	ldr	r1, [pc, #176]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4928      	ldr	r1, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	491e      	ldr	r1, [pc, #120]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4918      	ldr	r1, [pc, #96]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4914      	ldr	r1, [pc, #80]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d021      	beq.n	8001ab8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e021      	b.n	8001ac6 <HAL_GPIO_Init+0x2e2>
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4909      	ldr	r1, [pc, #36]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f ae8e 	bne.w	80017f8 <HAL_GPIO_Init+0x14>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	372c      	adds	r7, #44	; 0x2c
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f806 	bl	8001b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	b08b      	sub	sp, #44	; 0x2c
 8001b64:	af06      	add	r7, sp, #24
 8001b66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0fd      	b.n	8001d6e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f007 fa10 	bl	8008fac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 feff 	bl	800499c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	687e      	ldr	r6, [r7, #4]
 8001ba6:	466d      	mov	r5, sp
 8001ba8:	f106 0410 	add.w	r4, r6, #16
 8001bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	602b      	str	r3, [r5, #0]
 8001bb4:	1d33      	adds	r3, r6, #4
 8001bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb8:	6838      	ldr	r0, [r7, #0]
 8001bba:	f002 fec9 	bl	8004950 <USB_CoreInit>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0ce      	b.n	8001d6e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fefa 	bl	80049d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e04c      	b.n	8001c7c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	b298      	uxth	r0, r3
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3336      	adds	r3, #54	; 0x36
 8001c20:	4602      	mov	r2, r0
 8001c22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3303      	adds	r3, #3
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	3338      	adds	r3, #56	; 0x38
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	333c      	adds	r3, #60	; 0x3c
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3340      	adds	r3, #64	; 0x40
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3ad      	bcc.n	8001be2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e044      	b.n	8001d16 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3301      	adds	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3b5      	bcc.n	8001c8c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	687e      	ldr	r6, [r7, #4]
 8001d28:	466d      	mov	r5, sp
 8001d2a:	f106 0410 	add.w	r4, r6, #16
 8001d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	602b      	str	r3, [r5, #0]
 8001d36:	1d33      	adds	r3, r6, #4
 8001d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f002 fe54 	bl	80049e8 <USB_DevInit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00d      	b.n	8001d6e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fb06 	bl	8007378 <USB_DevDisconnect>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_PCD_Start+0x16>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e016      	b.n	8001dba <HAL_PCD_Start+0x44>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f002 fde9 	bl	8004970 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f007 fb76 	bl	8009492 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 fada 	bl	8007364 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b088      	sub	sp, #32
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fadc 	bl	800738c <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dde:	d102      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fb5f 	bl	80024a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 face 	bl	800738c <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfa:	d112      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f007 f944 	bl	80090a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f923 	bl	8002068 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 fab0 	bl	800738c <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e36:	d10b      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f005 fa99 	bl	800738c <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e64:	d10b      	bne.n	8001e7e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f005 fa82 	bl	800738c <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e92:	d126      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0204 	bic.w	r2, r2, #4
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0208 	bic.w	r2, r2, #8
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f007 f925 	bl	8009114 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001edc:	b292      	uxth	r2, r2
 8001ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f005 fa50 	bl	800738c <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef6:	f040 8082 	bne.w	8001ffe <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	77fb      	strb	r3, [r7, #31]
 8001efe:	e010      	b.n	8001f22 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	7ffb      	ldrb	r3, [r7, #31]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	441a      	add	r2, r3
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
 8001f0e:	8812      	ldrh	r2, [r2, #0]
 8001f10:	b292      	uxth	r2, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	3320      	adds	r3, #32
 8001f16:	443b      	add	r3, r7
 8001f18:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001f1c:	7ffb      	ldrb	r3, [r7, #31]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	77fb      	strb	r3, [r7, #31]
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	2b07      	cmp	r3, #7
 8001f26:	d9eb      	bls.n	8001f00 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	b292      	uxth	r2, r2
 8001f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f58:	bf00      	nop
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f6      	beq.n	8001f5a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	77fb      	strb	r3, [r7, #31]
 8001f88:	e00f      	b.n	8001faa <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f8a:	7ffb      	ldrb	r3, [r7, #31]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	4611      	mov	r1, r2
 8001f92:	7ffa      	ldrb	r2, [r7, #31]
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	440a      	add	r2, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	3320      	adds	r3, #32
 8001f9c:	443b      	add	r3, r7
 8001f9e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001fa2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001fa4:	7ffb      	ldrb	r3, [r7, #31]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	77fb      	strb	r3, [r7, #31]
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b07      	cmp	r3, #7
 8001fae:	d9ec      	bls.n	8001f8a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0204 	orr.w	r2, r2, #4
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f007 f871 	bl	80090e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f005 f9c2 	bl	800738c <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800200e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002012:	d10e      	bne.n	8002032 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002026:	b292      	uxth	r2, r2
 8002028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f007 f82a 	bl	8009086 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f005 f9a8 	bl	800738c <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002046:	d10b      	bne.n	8002060 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800205a:	b292      	uxth	r2, r2
 800205c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_PCD_SetAddress+0x1a>
 800207e:	2302      	movs	r3, #2
 8002080:	e013      	b.n	80020aa <HAL_PCD_SetAddress+0x42>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f005 f94f 	bl	800733e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	4608      	mov	r0, r1
 80020bc:	4611      	mov	r1, r2
 80020be:	461a      	mov	r2, r3
 80020c0:	4603      	mov	r3, r0
 80020c2:	70fb      	strb	r3, [r7, #3]
 80020c4:	460b      	mov	r3, r1
 80020c6:	803b      	strh	r3, [r7, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da0e      	bge.n	80020f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	705a      	strb	r2, [r3, #1]
 80020f4:	e00e      	b.n	8002114 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 0207 	and.w	r2, r3, #7
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002120:	883a      	ldrh	r2, [r7, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	78ba      	ldrb	r2, [r7, #2]
 800212a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800213e:	78bb      	ldrb	r3, [r7, #2]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d102      	bne.n	800214a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_EP_Open+0xa6>
 8002154:	2302      	movs	r3, #2
 8002156:	e00e      	b.n	8002176 <HAL_PCD_EP_Open+0xc4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fc5e 	bl	8004a28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002174:	7afb      	ldrb	r3, [r7, #11]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800218a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	da0e      	bge.n	80021b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	705a      	strb	r2, [r3, #1]
 80021ae:	e00e      	b.n	80021ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 0207 	and.w	r2, r3, #7
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_PCD_EP_Close+0x6a>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e00e      	b.n	8002206 <HAL_PCD_EP_Close+0x88>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 ff80 	bl	80050fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	460b      	mov	r3, r1
 800221c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	f003 0207 	and.w	r2, r3, #7
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800224e:	7afb      	ldrb	r3, [r7, #11]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	b2da      	uxtb	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	2b00      	cmp	r3, #0
 8002262:	d106      	bne.n	8002272 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6979      	ldr	r1, [r7, #20]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 f932 	bl	80054d4 <USB_EPStartXfer>
 8002270:	e005      	b.n	800227e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	4618      	mov	r0, r3
 800227a:	f003 f92b 	bl	80054d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0207 	and.w	r2, r3, #7
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	460b      	mov	r3, r1
 80022c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2201      	movs	r2, #1
 8002300:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002302:	7afb      	ldrb	r3, [r7, #11]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	b2da      	uxtb	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 f8d8 	bl	80054d4 <USB_EPStartXfer>
 8002324:	e005      	b.n	8002332 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 f8d1 	bl	80054d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	f003 0207 	and.w	r2, r3, #7
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d901      	bls.n	800235a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e04c      	b.n	80023f4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800235a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	da0e      	bge.n	8002380 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	705a      	strb	r2, [r3, #1]
 800237e:	e00c      	b.n	800239a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_PCD_EP_SetStall+0x7e>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e01c      	b.n	80023f4 <HAL_PCD_EP_SetStall+0xb8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 febb 	bl	8007144 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f004 ffe0 	bl	80073aa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d901      	bls.n	800241a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e040      	b.n	800249c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800241a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da0e      	bge.n	8002440 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	705a      	strb	r2, [r3, #1]
 800243e:	e00e      	b.n	800245e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 0207 	and.w	r2, r3, #7
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_ClrStall+0x82>
 800247a:	2302      	movs	r3, #2
 800247c:	e00e      	b.n	800249c <HAL_PCD_EP_ClrStall+0xa0>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f004 fea9 	bl	80071e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08e      	sub	sp, #56	; 0x38
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024ac:	e2ec      	b.n	8002a88 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80024c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 8161 	bne.w	8002790 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d152      	bne.n	800257e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	81fb      	strh	r3, [r7, #14]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	89fb      	ldrh	r3, [r7, #14]
 80024f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3328      	adds	r3, #40	; 0x28
 8002500:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	3302      	adds	r3, #2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	441a      	add	r2, r3
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800253c:	2100      	movs	r1, #0
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f006 fd87 	bl	8009052 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 829b 	beq.w	8002a88 <PCD_EP_ISR_Handler+0x5e4>
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8296 	bne.w	8002a88 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002568:	b2da      	uxtb	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b292      	uxth	r2, r2
 8002570:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800257c:	e284      	b.n	8002a88 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800258e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002594:	2b00      	cmp	r3, #0
 8002596:	d034      	beq.n	8002602 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	3306      	adds	r3, #6
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f004 ff37 	bl	800744a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025e8:	4013      	ands	r3, r2
 80025ea:	823b      	strh	r3, [r7, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	8a3a      	ldrh	r2, [r7, #16]
 80025f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f6:	b292      	uxth	r2, r2
 80025f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f006 fcfc 	bl	8008ff8 <HAL_PCD_SetupStageCallback>
 8002600:	e242      	b.n	8002a88 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002602:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002606:	2b00      	cmp	r3, #0
 8002608:	f280 823e 	bge.w	8002a88 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29a      	uxth	r2, r3
 8002614:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002618:	4013      	ands	r3, r2
 800261a:	83bb      	strh	r3, [r7, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	8bba      	ldrh	r2, [r7, #28]
 8002622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002626:	b292      	uxth	r2, r2
 8002628:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	3306      	adds	r3, #6
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d019      	beq.n	8002692 <PCD_EP_ISR_Handler+0x1ee>
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d015      	beq.n	8002692 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	6959      	ldr	r1, [r3, #20]
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002676:	b29b      	uxth	r3, r3
 8002678:	f004 fee7 	bl	800744a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	441a      	add	r2, r3
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f006 fcc5 	bl	800901c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 81f2 	bne.w	8002a88 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d112      	bne.n	80026f2 <PCD_EP_ISR_Handler+0x24e>
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	e02f      	b.n	8002752 <PCD_EP_ISR_Handler+0x2ae>
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b3e      	cmp	r3, #62	; 0x3e
 80026f8:	d813      	bhi.n	8002722 <PCD_EP_ISR_Handler+0x27e>
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <PCD_EP_ISR_Handler+0x270>
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	3301      	adds	r3, #1
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	b29b      	uxth	r3, r3
 8002718:	029b      	lsls	r3, r3, #10
 800271a:	b29a      	uxth	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e017      	b.n	8002752 <PCD_EP_ISR_Handler+0x2ae>
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <PCD_EP_ISR_Handler+0x298>
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	3b01      	subs	r3, #1
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	b29b      	uxth	r3, r3
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	b29b      	uxth	r3, r3
 8002744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274c:	b29a      	uxth	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	827b      	strh	r3, [r7, #18]
 8002764:	8a7b      	ldrh	r3, [r7, #18]
 8002766:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800276a:	827b      	strh	r3, [r7, #18]
 800276c:	8a7b      	ldrh	r3, [r7, #18]
 800276e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002772:	827b      	strh	r3, [r7, #18]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	8a7b      	ldrh	r3, [r7, #18]
 800277a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]
 800278e:	e17b      	b.n	8002a88 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f280 80ea 	bge.w	8002980 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027c2:	4013      	ands	r3, r2
 80027c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027da:	b292      	uxth	r2, r2
 80027dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	7b1b      	ldrb	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d122      	bne.n	8002842 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	3306      	adds	r3, #6
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002824:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002826:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8087 	beq.w	800293c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	6959      	ldr	r1, [r3, #20]
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	88da      	ldrh	r2, [r3, #6]
 800283a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800283c:	f004 fe05 	bl	800744a <USB_ReadPMA>
 8002840:	e07c      	b.n	800293c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	78db      	ldrb	r3, [r3, #3]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d108      	bne.n	800285c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800284a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800284c:	461a      	mov	r2, r3
 800284e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f927 	bl	8002aa4 <HAL_PCD_EP_DB_Receive>
 8002856:	4603      	mov	r3, r0
 8002858:	86fb      	strh	r3, [r7, #54]	; 0x36
 800285a:	e06f      	b.n	800293c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	847b      	strh	r3, [r7, #34]	; 0x22
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002894:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d021      	beq.n	80028fa <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	3302      	adds	r3, #2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02a      	beq.n	800293c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	6959      	ldr	r1, [r3, #20]
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	891a      	ldrh	r2, [r3, #8]
 80028f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f4:	f004 fda9 	bl	800744a <USB_ReadPMA>
 80028f8:	e020      	b.n	800293c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	3306      	adds	r3, #6
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002922:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002924:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	6959      	ldr	r1, [r3, #20]
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	895a      	ldrh	r2, [r3, #10]
 8002936:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002938:	f004 fd87 	bl	800744a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002942:	441a      	add	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800294e:	441a      	add	r2, r3
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <PCD_EP_ISR_Handler+0x4c2>
 800295c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	429a      	cmp	r2, r3
 8002964:	d206      	bcs.n	8002974 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f006 fb55 	bl	800901c <HAL_PCD_DataOutStageCallback>
 8002972:	e005      	b.n	8002980 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fdaa 	bl	80054d4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002980:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d07e      	beq.n	8002a88 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800298a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	843b      	strh	r3, [r7, #32]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	8c3b      	ldrh	r3, [r7, #32]
 80029ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	78db      	ldrb	r3, [r3, #3]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d00c      	beq.n	80029f8 <PCD_EP_ISR_Handler+0x554>
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	78db      	ldrb	r3, [r3, #3]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d146      	bne.n	8002a7c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d141      	bne.n	8002a7c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a20:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	8bfb      	ldrh	r3, [r7, #30]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d906      	bls.n	8002a3a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	8bfb      	ldrh	r3, [r7, #30]
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	619a      	str	r2, [r3, #24]
 8002a38:	e002      	b.n	8002a40 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f006 faff 	bl	8009052 <HAL_PCD_DataInStageCallback>
 8002a54:	e018      	b.n	8002a88 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	8bfb      	ldrh	r3, [r7, #30]
 8002a5c:	441a      	add	r2, r3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	8bfb      	ldrh	r3, [r7, #30]
 8002a68:	441a      	add	r2, r3
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fd2d 	bl	80054d4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a7a:	e005      	b.n	8002a88 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f91b 	bl	8002cbe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f6ff ad0a 	blt.w	80024ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3738      	adds	r7, #56	; 0x38
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d07e      	beq.n	8002bba <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	8b7b      	ldrh	r3, [r7, #26]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d306      	bcc.n	8002afe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	8b7b      	ldrh	r3, [r7, #26]
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	619a      	str	r2, [r3, #24]
 8002afc:	e002      	b.n	8002b04 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d123      	bne.n	8002b54 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	833b      	strh	r3, [r7, #24]
 8002b28:	8b3b      	ldrh	r3, [r7, #24]
 8002b2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b2e:	833b      	strh	r3, [r7, #24]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	8b3b      	ldrh	r3, [r7, #24]
 8002b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01f      	beq.n	8002b9e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b78:	82fb      	strh	r3, [r7, #22]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8087 	beq.w	8002cb4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6959      	ldr	r1, [r3, #20]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	891a      	ldrh	r2, [r3, #8]
 8002bb2:	8b7b      	ldrh	r3, [r7, #26]
 8002bb4:	f004 fc49 	bl	800744a <USB_ReadPMA>
 8002bb8:	e07c      	b.n	8002cb4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3306      	adds	r3, #6
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	8b7b      	ldrh	r3, [r7, #26]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d306      	bcc.n	8002bfc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	8b7b      	ldrh	r3, [r7, #26]
 8002bf4:	1ad2      	subs	r2, r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	e002      	b.n	8002c02 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d123      	bne.n	8002c52 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c24:	83fb      	strh	r3, [r7, #30]
 8002c26:	8bfb      	ldrh	r3, [r7, #30]
 8002c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c2c:	83fb      	strh	r3, [r7, #30]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	441a      	add	r2, r3
 8002c3c:	8bfb      	ldrh	r3, [r7, #30]
 8002c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d11f      	bne.n	8002c9c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	83bb      	strh	r3, [r7, #28]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	441a      	add	r2, r3
 8002c86:	8bbb      	ldrh	r3, [r7, #28]
 8002c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c9c:	8b7b      	ldrh	r3, [r7, #26]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6959      	ldr	r1, [r3, #20]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	895a      	ldrh	r2, [r3, #10]
 8002cae:	8b7b      	ldrh	r3, [r7, #26]
 8002cb0:	f004 fbcb 	bl	800744a <USB_ReadPMA>
    }
  }

  return count;
 8002cb4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b0a2      	sub	sp, #136	; 0x88
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 81c7 	beq.w	8003066 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	3302      	adds	r3, #2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d907      	bls.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	619a      	str	r2, [r3, #24]
 8002d1e:	e002      	b.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80b9 	bne.w	8002ea2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d126      	bne.n	8002d86 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	4413      	add	r3, r2
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	011a      	lsls	r2, r3, #4
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	4413      	add	r3, r2
 8002d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	e01a      	b.n	8002dbc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	785b      	ldrb	r3, [r3, #1]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d116      	bne.n	8002dbc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	4413      	add	r3, r2
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	011a      	lsls	r2, r3, #4
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	4413      	add	r3, r2
 8002db0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	2200      	movs	r2, #0
 8002dba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	623b      	str	r3, [r7, #32]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d126      	bne.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	011a      	lsls	r2, r3, #4
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	e017      	b.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d113      	bne.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	4413      	add	r3, r2
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	011a      	lsls	r2, r3, #4
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	2200      	movs	r2, #0
 8002e46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f006 f8ff 	bl	8009052 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 82d4 	beq.w	8003408 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	827b      	strh	r3, [r7, #18]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	8a7b      	ldrh	r3, [r7, #18]
 8002e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	8013      	strh	r3, [r2, #0]
 8002ea0:	e2b2      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d021      	beq.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	f040 8286 	bne.w	8003408 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f04:	441a      	add	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f12:	441a      	add	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d309      	bcc.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f30:	1ad2      	subs	r2, r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	621a      	str	r2, [r3, #32]
 8002f36:	e015      	b.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f4e:	e009      	b.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d155      	bne.n	8003018 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	4413      	add	r3, r2
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	011a      	lsls	r2, r3, #4
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
 8002f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d112      	bne.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x302>
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	e047      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x392>
 8002fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8002fc4:	d811      	bhi.n	8002fea <HAL_PCD_EP_DB_Transmit+0x32c>
 8002fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x31e>
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd8:	3301      	adds	r3, #1
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	029b      	lsls	r3, r3, #10
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e032      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x392>
 8002fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_PCD_EP_DB_Transmit+0x342>
 8002ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003002:	b29b      	uxth	r3, r3
 8003004:	029b      	lsls	r3, r3, #10
 8003006:	b29b      	uxth	r3, r3
 8003008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800300c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003010:	b29a      	uxth	r2, r3
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	e01b      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x392>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d117      	bne.n	8003050 <HAL_PCD_EP_DB_Transmit+0x392>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003034:	4413      	add	r3, r2
 8003036:	643b      	str	r3, [r7, #64]	; 0x40
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	011a      	lsls	r2, r3, #4
 800303e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003040:	4413      	add	r3, r2
 8003042:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304a:	b29a      	uxth	r2, r3
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6959      	ldr	r1, [r3, #20]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	891a      	ldrh	r2, [r3, #8]
 800305c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305e:	b29b      	uxth	r3, r3
 8003060:	f004 f9ae 	bl	80073c0 <USB_WritePMA>
 8003064:	e1d0      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800306e:	b29b      	uxth	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	3306      	adds	r3, #6
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800308e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800309a:	429a      	cmp	r2, r3
 800309c:	d307      	bcc.n	80030ae <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	619a      	str	r2, [r3, #24]
 80030ac:	e002      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 80c4 	bne.w	8003246 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d126      	bne.n	8003114 <HAL_PCD_EP_DB_Transmit+0x456>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030da:	4413      	add	r3, r2
 80030dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	011a      	lsls	r2, r3, #4
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800310c:	b29a      	uxth	r2, r3
 800310e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	e01a      	b.n	800314a <HAL_PCD_EP_DB_Transmit+0x48c>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d116      	bne.n	800314a <HAL_PCD_EP_DB_Transmit+0x48c>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	677b      	str	r3, [r7, #116]	; 0x74
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003130:	4413      	add	r3, r2
 8003132:	677b      	str	r3, [r7, #116]	; 0x74
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	011a      	lsls	r2, r3, #4
 800313a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313c:	4413      	add	r3, r2
 800313e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003142:	673b      	str	r3, [r7, #112]	; 0x70
 8003144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003146:	2200      	movs	r2, #0
 8003148:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12f      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003168:	b29b      	uxth	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003170:	4413      	add	r3, r2
 8003172:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	011a      	lsls	r2, r3, #4
 800317c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003180:	4413      	add	r3, r2
 8003182:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800318a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003196:	b29a      	uxth	r2, r3
 8003198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319c:	801a      	strh	r2, [r3, #0]
 800319e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	e017      	b.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d113      	bne.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ce:	4413      	add	r3, r2
 80031d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	011a      	lsls	r2, r3, #4
 80031d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031da:	4413      	add	r3, r2
 80031dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e4:	2200      	movs	r2, #0
 80031e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f005 ff2f 	bl	8009052 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8104 	bne.w	8003408 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800323c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003240:	b29b      	uxth	r3, r3
 8003242:	8013      	strh	r3, [r2, #0]
 8003244:	e0e0      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d121      	bne.n	8003294 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800328c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800329a:	2b01      	cmp	r3, #1
 800329c:	f040 80b4 	bne.w	8003408 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032a8:	441a      	add	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032b6:	441a      	add	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	6a1a      	ldr	r2, [r3, #32]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d309      	bcc.n	80032dc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6a1a      	ldr	r2, [r3, #32]
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	1ad2      	subs	r2, r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	621a      	str	r2, [r3, #32]
 80032da:	e015      	b.n	8003308 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80032e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032f2:	e009      	b.n	8003308 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	667b      	str	r3, [r7, #100]	; 0x64
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d155      	bne.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x704>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003324:	b29b      	uxth	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332a:	4413      	add	r3, r2
 800332c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	011a      	lsls	r2, r3, #4
 8003334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003336:	4413      	add	r3, r2
 8003338:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800333c:	65bb      	str	r3, [r7, #88]	; 0x58
 800333e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003340:	2b00      	cmp	r3, #0
 8003342:	d112      	bne.n	800336a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800334e:	b29a      	uxth	r2, r3
 8003350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003362:	b29a      	uxth	r2, r3
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	e044      	b.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x736>
 800336a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336c:	2b3e      	cmp	r3, #62	; 0x3e
 800336e:	d811      	bhi.n	8003394 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	657b      	str	r3, [r7, #84]	; 0x54
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003382:	3301      	adds	r3, #1
 8003384:	657b      	str	r3, [r7, #84]	; 0x54
 8003386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003388:	b29b      	uxth	r3, r3
 800338a:	029b      	lsls	r3, r3, #10
 800338c:	b29a      	uxth	r2, r3
 800338e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	e02f      	b.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x736>
 8003394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	657b      	str	r3, [r7, #84]	; 0x54
 800339a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <HAL_PCD_EP_DB_Transmit+0x6ec>
 80033a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a6:	3b01      	subs	r3, #1
 80033a8:	657b      	str	r3, [r7, #84]	; 0x54
 80033aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	e018      	b.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x736>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d114      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x736>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d8:	4413      	add	r3, r2
 80033da:	667b      	str	r3, [r7, #100]	; 0x64
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	011a      	lsls	r2, r3, #4
 80033e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e4:	4413      	add	r3, r2
 80033e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033ea:	663b      	str	r3, [r7, #96]	; 0x60
 80033ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6959      	ldr	r1, [r3, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	895a      	ldrh	r2, [r3, #10]
 8003400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003402:	b29b      	uxth	r3, r3
 8003404:	f003 ffdc 	bl	80073c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003422:	823b      	strh	r3, [r7, #16]
 8003424:	8a3b      	ldrh	r3, [r7, #16]
 8003426:	f083 0310 	eor.w	r3, r3, #16
 800342a:	823b      	strh	r3, [r7, #16]
 800342c:	8a3b      	ldrh	r3, [r7, #16]
 800342e:	f083 0320 	eor.w	r3, r3, #32
 8003432:	823b      	strh	r3, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	441a      	add	r2, r3
 8003442:	8a3b      	ldrh	r3, [r7, #16]
 8003444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800344c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3788      	adds	r7, #136	; 0x88
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003462:	b480      	push	{r7}
 8003464:	b087      	sub	sp, #28
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
 8003470:	4613      	mov	r3, r2
 8003472:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003474:	897b      	ldrh	r3, [r7, #10]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003480:	897b      	ldrh	r3, [r7, #10]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e009      	b.n	80034ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003498:	897a      	ldrh	r2, [r7, #10]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034ac:	893b      	ldrh	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	80da      	strh	r2, [r3, #6]
 80034c0:	e00b      	b.n	80034da <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2201      	movs	r2, #1
 80034c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e272      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8087 	beq.w	8003616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003508:	4b92      	ldr	r3, [pc, #584]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b04      	cmp	r3, #4
 8003512:	d00c      	beq.n	800352e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003514:	4b8f      	ldr	r3, [pc, #572]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d112      	bne.n	8003546 <HAL_RCC_OscConfig+0x5e>
 8003520:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d10b      	bne.n	8003546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352e:	4b89      	ldr	r3, [pc, #548]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d06c      	beq.n	8003614 <HAL_RCC_OscConfig+0x12c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d168      	bne.n	8003614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e24c      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x76>
 8003550:	4b80      	ldr	r3, [pc, #512]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a7f      	ldr	r2, [pc, #508]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e02e      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7a      	ldr	r2, [pc, #488]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800356c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b78      	ldr	r3, [pc, #480]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a77      	ldr	r2, [pc, #476]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0xbc>
 800358a:	4b72      	ldr	r3, [pc, #456]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a71      	ldr	r2, [pc, #452]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6e      	ldr	r2, [pc, #440]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 80035a4:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a6a      	ldr	r2, [pc, #424]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b68      	ldr	r3, [pc, #416]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a67      	ldr	r2, [pc, #412]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fa4e 	bl	8000a64 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd fa4a 	bl	8000a64 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e200      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xe4>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd fa3a 	bl	8000a64 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fd fa36 	bl	8000a64 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1ec      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b53      	ldr	r3, [pc, #332]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x10c>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800362e:	4b49      	ldr	r3, [pc, #292]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x18c>
 800363a:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x176>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1c0      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4939      	ldr	r1, [pc, #228]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b36      	ldr	r3, [pc, #216]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fd f9ef 	bl	8000a64 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7fd f9eb 	bl	8000a64 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1a1      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4927      	ldr	r1, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd f9ce 	bl	8000a64 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fd f9ca 	bl	8000a64 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e180      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d03a      	beq.n	800376c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d019      	beq.n	8003732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fd f9ae 	bl	8000a64 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd f9aa 	bl	8000a64 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e160      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800372a:	2001      	movs	r0, #1
 800372c:	f000 fad8 	bl	8003ce0 <RCC_Delay>
 8003730:	e01c      	b.n	800376c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fd f994 	bl	8000a64 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373e:	e00f      	b.n	8003760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fd f990 	bl	8000a64 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d908      	bls.n	8003760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e146      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	42420000 	.word	0x42420000
 800375c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b92      	ldr	r3, [pc, #584]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e9      	bne.n	8003740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a6 	beq.w	80038c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b8b      	ldr	r3, [pc, #556]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b88      	ldr	r3, [pc, #544]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4a87      	ldr	r2, [pc, #540]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	61d3      	str	r3, [r2, #28]
 8003796:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b82      	ldr	r3, [pc, #520]	; (80039b0 <HAL_RCC_OscConfig+0x4c8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b7f      	ldr	r3, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x4c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7e      	ldr	r2, [pc, #504]	; (80039b0 <HAL_RCC_OscConfig+0x4c8>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fd f951 	bl	8000a64 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fd f94d 	bl	8000a64 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	; 0x64
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e103      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b75      	ldr	r3, [pc, #468]	; (80039b0 <HAL_RCC_OscConfig+0x4c8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x312>
 80037ec:	4b6f      	ldr	r3, [pc, #444]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a6e      	ldr	r2, [pc, #440]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	e02d      	b.n	8003856 <HAL_RCC_OscConfig+0x36e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x334>
 8003802:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4a69      	ldr	r2, [pc, #420]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6213      	str	r3, [r2, #32]
 800380e:	4b67      	ldr	r3, [pc, #412]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a66      	ldr	r2, [pc, #408]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	6213      	str	r3, [r2, #32]
 800381a:	e01c      	b.n	8003856 <HAL_RCC_OscConfig+0x36e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b05      	cmp	r3, #5
 8003822:	d10c      	bne.n	800383e <HAL_RCC_OscConfig+0x356>
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a60      	ldr	r2, [pc, #384]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	6213      	str	r3, [r2, #32]
 8003830:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a5d      	ldr	r2, [pc, #372]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6213      	str	r3, [r2, #32]
 800383c:	e00b      	b.n	8003856 <HAL_RCC_OscConfig+0x36e>
 800383e:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a5a      	ldr	r2, [pc, #360]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	6213      	str	r3, [r2, #32]
 800384a:	4b58      	ldr	r3, [pc, #352]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a57      	ldr	r2, [pc, #348]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d015      	beq.n	800388a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7fd f901 	bl	8000a64 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fd f8fd 	bl	8000a64 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e0b1      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ee      	beq.n	8003866 <HAL_RCC_OscConfig+0x37e>
 8003888:	e014      	b.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fd f8eb 	bl	8000a64 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fd f8e7 	bl	8000a64 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e09b      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a8:	4b40      	ldr	r3, [pc, #256]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ee      	bne.n	8003892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ba:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4a3b      	ldr	r2, [pc, #236]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8087 	beq.w	80039de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d061      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d146      	bne.n	8003972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e4:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd f8bb 	bl	8000a64 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fd f8b7 	bl	8000a64 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e06d      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003904:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d108      	bne.n	800392c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4921      	ldr	r1, [pc, #132]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a19      	ldr	r1, [r3, #32]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	430b      	orrs	r3, r1
 800393e:	491b      	ldr	r1, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003944:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fd f88b 	bl	8000a64 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003952:	f7fd f887 	bl	8000a64 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e03d      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x46a>
 8003970:	e035      	b.n	80039de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fd f874 	bl	8000a64 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003980:	f7fd f870 	bl	8000a64 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e026      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_OscConfig+0x4c4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x498>
 800399e:	e01e      	b.n	80039de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e019      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
 80039b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x500>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0d0      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d910      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b67      	ldr	r3, [pc, #412]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4965      	ldr	r1, [pc, #404]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b8      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	494d      	ldr	r1, [pc, #308]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d040      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d115      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e073      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06b      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4936      	ldr	r1, [pc, #216]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fc ffc2 	bl	8000a64 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fc ffbe 	bl	8000a64 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e053      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d210      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	4922      	ldr	r1, [pc, #136]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e032      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4916      	ldr	r1, [pc, #88]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	490e      	ldr	r1, [pc, #56]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b7a:	f000 f821 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	490a      	ldr	r1, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1d0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc ff20 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40022000 	.word	0x40022000
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	080095cc 	.word	0x080095cc
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	20000004 	.word	0x20000004

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	b490      	push	{r4, r7}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xac>)
 8003bc8:	1d3c      	adds	r4, r7, #4
 8003bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bd0:	f240 2301 	movw	r3, #513	; 0x201
 8003bd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x40>
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x46>
 8003bfe:	e02b      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c00:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c02:	623b      	str	r3, [r7, #32]
      break;
 8003c04:	e02b      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	0c9b      	lsrs	r3, r3, #18
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3328      	adds	r3, #40	; 0x28
 8003c10:	443b      	add	r3, r7
 8003c12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c16:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d012      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	0c5b      	lsrs	r3, r3, #17
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	3328      	adds	r3, #40	; 0x28
 8003c2e:	443b      	add	r3, r7
 8003c30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4a0e      	ldr	r2, [pc, #56]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c3a:	fb03 f202 	mul.w	r2, r3, r2
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e004      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	623b      	str	r3, [r7, #32]
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c5a:	623b      	str	r3, [r7, #32]
      break;
 8003c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc90      	pop	{r4, r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	08009570 	.word	0x08009570
 8003c70:	40021000 	.word	0x40021000
 8003c74:	007a1200 	.word	0x007a1200
 8003c78:	003d0900 	.word	0x003d0900

08003c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	20000000 	.word	0x20000000

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c94:	f7ff fff2 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	080095dc 	.word	0x080095dc

08003cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cbc:	f7ff ffde 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	0adb      	lsrs	r3, r3, #11
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	080095dc 	.word	0x080095dc

08003ce0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <RCC_Delay+0x34>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <RCC_Delay+0x38>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0a5b      	lsrs	r3, r3, #9
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cfc:	bf00      	nop
  }
  while (Delay --);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	60fa      	str	r2, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f9      	bne.n	8003cfc <RCC_Delay+0x1c>
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	20000000 	.word	0x20000000
 8003d18:	10624dd3 	.word	0x10624dd3

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d07d      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a4b      	ldr	r2, [pc, #300]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	61d3      	str	r3, [r2, #28]
 8003d54:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d64:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d118      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a42      	ldr	r2, [pc, #264]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7c:	f7fc fe72 	bl	8000a64 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	e008      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d84:	f7fc fe6e 	bl	8000a64 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e06d      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b3a      	ldr	r3, [pc, #232]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d02e      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d027      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd0:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dd6:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d014      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fc fe3d 	bl	8000a64 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fc fe39 	bl	8000a64 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e036      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4917      	ldr	r1, [pc, #92]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e28:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	490b      	ldr	r1, [pc, #44]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	42420440 	.word	0x42420440

08003e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e076      	b.n	8003f88 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eaa:	d009      	beq.n	8003ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
 8003eb2:	e005      	b.n	8003ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc fc3a 	bl	8000754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	ea42 0103 	orr.w	r1, r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	0c1a      	lsrs	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f002 0204 	and.w	r2, r2, #4
 8003f66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e041      	b.n	8004026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc fc18 	bl	80007ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f000 fa7a 	bl	80044c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e03a      	b.n	80040be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_TIM_Base_Start_IT+0x98>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x58>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d009      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x58>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_TIM_Base_Start_IT+0x9c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x58>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b06      	cmp	r3, #6
 8004098:	d010      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	e007      	b.n	80040bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800

080040d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0202 	mvn.w	r2, #2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9ba 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9ad 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f9bc 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b04      	cmp	r3, #4
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0204 	mvn.w	r2, #4
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f990 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f983 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f992 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b08      	cmp	r3, #8
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0208 	mvn.w	r2, #8
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2204      	movs	r2, #4
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f966 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f959 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f968 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0210 	mvn.w	r2, #16
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2208      	movs	r2, #8
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f93c 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f92f 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f93e 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0201 	mvn.w	r2, #1
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f90a 	bl	800446c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa81 	bl	8004786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f902 	bl	80044b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0220 	mvn.w	r2, #32
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa4c 	bl	8004774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0b3      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x180>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800431a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004322:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004334:	d03e      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0xd0>
 8004336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433a:	f200 8087 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x168>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	f000 8085 	beq.w	8004450 <HAL_TIM_ConfigClockSource+0x16c>
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	d87f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x168>
 800434c:	2b70      	cmp	r3, #112	; 0x70
 800434e:	d01a      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0xa2>
 8004350:	2b70      	cmp	r3, #112	; 0x70
 8004352:	d87b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x168>
 8004354:	2b60      	cmp	r3, #96	; 0x60
 8004356:	d050      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x116>
 8004358:	2b60      	cmp	r3, #96	; 0x60
 800435a:	d877      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x168>
 800435c:	2b50      	cmp	r3, #80	; 0x50
 800435e:	d03c      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xf6>
 8004360:	2b50      	cmp	r3, #80	; 0x50
 8004362:	d873      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x168>
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d058      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x136>
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d86f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x168>
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d064      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x156>
 8004370:	2b30      	cmp	r3, #48	; 0x30
 8004372:	d86b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x168>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d060      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x156>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d867      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x168>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x156>
 8004380:	2b10      	cmp	r3, #16
 8004382:	d05a      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004384:	e062      	b.n	800444c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f000 f970 	bl	800467a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	609a      	str	r2, [r3, #8]
      break;
 80043b2:	e04e      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f000 f959 	bl	800467a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d6:	609a      	str	r2, [r3, #8]
      break;
 80043d8:	e03b      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 f8d0 	bl	800458c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2150      	movs	r1, #80	; 0x50
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f927 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e02b      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	461a      	mov	r2, r3
 8004408:	f000 f8ee 	bl	80045e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2160      	movs	r1, #96	; 0x60
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f917 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004418:	e01b      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	461a      	mov	r2, r3
 8004428:	f000 f8b0 	bl	800458c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2140      	movs	r1, #64	; 0x40
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f907 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004438:	e00b      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 f8fe 	bl	8004646 <TIM_ITRx_SetConfig>
        break;
 800444a:	e002      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004450:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
	...

080044c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a29      	ldr	r2, [pc, #164]	; (8004580 <TIM_Base_SetConfig+0xb8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00b      	beq.n	80044f8 <TIM_Base_SetConfig+0x30>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d007      	beq.n	80044f8 <TIM_Base_SetConfig+0x30>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <TIM_Base_SetConfig+0xbc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_Base_SetConfig+0x30>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a25      	ldr	r2, [pc, #148]	; (8004588 <TIM_Base_SetConfig+0xc0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d108      	bne.n	800450a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <TIM_Base_SetConfig+0xb8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00b      	beq.n	800452a <TIM_Base_SetConfig+0x62>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d007      	beq.n	800452a <TIM_Base_SetConfig+0x62>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <TIM_Base_SetConfig+0xbc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <TIM_Base_SetConfig+0x62>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <TIM_Base_SetConfig+0xc0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a07      	ldr	r2, [pc, #28]	; (8004580 <TIM_Base_SetConfig+0xb8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d103      	bne.n	8004570 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	615a      	str	r2, [r3, #20]
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800

0800458c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 030a 	bic.w	r3, r3, #10
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f023 0210 	bic.w	r2, r3, #16
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	031b      	lsls	r3, r3, #12
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	621a      	str	r2, [r3, #32]
}
 800463c:	bf00      	nop
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	f043 0307 	orr.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b087      	sub	sp, #28
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	021a      	lsls	r2, r3, #8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	431a      	orrs	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	609a      	str	r2, [r3, #8]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e046      	b.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a16      	ldr	r2, [pc, #88]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471c:	d009      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10c      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800

08004774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e03f      	b.n	800482a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc f83a 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f829 	bl	8004834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800486e:	f023 030c 	bic.w	r3, r3, #12
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	430b      	orrs	r3, r1
 800487a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <UART_SetConfig+0x114>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7ff fa0c 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	e002      	b.n	80048aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7ff f9f4 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 80048a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	4a22      	ldr	r2, [pc, #136]	; (800494c <UART_SetConfig+0x118>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	0119      	lsls	r1, r3, #4
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009a      	lsls	r2, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <UART_SetConfig+0x118>)
 80048e2:	fba3 0302 	umull	r0, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2064      	movs	r0, #100	; 0x64
 80048ea:	fb00 f303 	mul.w	r3, r0, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	; 0x32
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <UART_SetConfig+0x118>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004900:	4419      	add	r1, r3
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009a      	lsls	r2, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fbb2 f2f3 	udiv	r2, r2, r3
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <UART_SetConfig+0x118>)
 800491a:	fba3 0302 	umull	r0, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2064      	movs	r0, #100	; 0x64
 8004922:	fb00 f303 	mul.w	r3, r0, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a07      	ldr	r2, [pc, #28]	; (800494c <UART_SetConfig+0x118>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	f003 020f 	and.w	r2, r3, #15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	440a      	add	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40013800 	.word	0x40013800
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004950:	b084      	sub	sp, #16
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	f107 0014 	add.w	r0, r7, #20
 800495e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	b004      	add	sp, #16
 800496e:	4770      	bx	lr

08004970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004980:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004984:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	b29a      	uxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4013      	ands	r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049e8:	b084      	sub	sp, #16
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	f107 0014 	add.w	r0, r7, #20
 80049f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	b004      	add	sp, #16
 8004a26:	4770      	bx	lr

08004a28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b09b      	sub	sp, #108	; 0x6c
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	78db      	ldrb	r3, [r3, #3]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d81f      	bhi.n	8004a9a <USB_ActivateEndpoint+0x72>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <USB_ActivateEndpoint+0x38>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a8d 	.word	0x08004a8d
 8004a68:	08004aa3 	.word	0x08004aa3
 8004a6c:	08004a7f 	.word	0x08004a7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a7c:	e012      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a8a:	e00b      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a98:	e004      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004aa0:	e000      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>
      break;
 8004aa2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	7b1b      	ldrb	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 8149 	bne.w	8004da8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8084 	beq.w	8004c28 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4413      	add	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	011a      	lsls	r2, r3, #4
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	88db      	ldrh	r3, [r3, #6]
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	81fb      	strh	r3, [r7, #14]
 8004b62:	89fb      	ldrh	r3, [r7, #14]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01b      	beq.n	8004ba4 <USB_ActivateEndpoint+0x17c>
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	81bb      	strh	r3, [r7, #12]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	441a      	add	r2, r3
 8004b8e:	89bb      	ldrh	r3, [r7, #12]
 8004b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	78db      	ldrb	r3, [r3, #3]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d020      	beq.n	8004bee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc2:	813b      	strh	r3, [r7, #8]
 8004bc4:	893b      	ldrh	r3, [r7, #8]
 8004bc6:	f083 0320 	eor.w	r3, r3, #32
 8004bca:	813b      	strh	r3, [r7, #8]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	893b      	ldrh	r3, [r7, #8]
 8004bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8013      	strh	r3, [r2, #0]
 8004bec:	e27f      	b.n	80050ee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c04:	817b      	strh	r3, [r7, #10]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	897b      	ldrh	r3, [r7, #10]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]
 8004c26:	e262      	b.n	80050ee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	4413      	add	r3, r2
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	011a      	lsls	r2, r3, #4
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	88db      	ldrh	r3, [r3, #6]
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	4413      	add	r3, r2
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	011a      	lsls	r2, r3, #4
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d112      	bne.n	8004cae <USB_ActivateEndpoint+0x286>
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	801a      	strh	r2, [r3, #0]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e02f      	b.n	8004d0e <USB_ActivateEndpoint+0x2e6>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb4:	d813      	bhi.n	8004cde <USB_ActivateEndpoint+0x2b6>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <USB_ActivateEndpoint+0x2a8>
 8004cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ccc:	3301      	adds	r3, #1
 8004cce:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	e017      	b.n	8004d0e <USB_ActivateEndpoint+0x2e6>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <USB_ActivateEndpoint+0x2d0>
 8004cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	83fb      	strh	r3, [r7, #30]
 8004d1c:	8bfb      	ldrh	r3, [r7, #30]
 8004d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01b      	beq.n	8004d5e <USB_ActivateEndpoint+0x336>
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3c:	83bb      	strh	r3, [r7, #28]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	8bbb      	ldrh	r3, [r7, #28]
 8004d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	837b      	strh	r3, [r7, #26]
 8004d76:	8b7b      	ldrh	r3, [r7, #26]
 8004d78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d7c:	837b      	strh	r3, [r7, #26]
 8004d7e:	8b7b      	ldrh	r3, [r7, #26]
 8004d80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d84:	837b      	strh	r3, [r7, #26]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	8b7b      	ldrh	r3, [r7, #26]
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]
 8004da6:	e1a2      	b.n	80050ee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df4:	4413      	add	r3, r2
 8004df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	011a      	lsls	r2, r3, #4
 8004dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	891b      	ldrh	r3, [r3, #8]
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e28:	4413      	add	r3, r2
 8004e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	011a      	lsls	r2, r3, #4
 8004e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	895b      	ldrh	r3, [r3, #10]
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 8091 	bne.w	8004f78 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004e64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01b      	beq.n	8004ea6 <USB_ActivateEndpoint+0x47e>
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	441a      	add	r2, r3
 8004e90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	873b      	strh	r3, [r7, #56]	; 0x38
 8004eb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01b      	beq.n	8004ef6 <USB_ActivateEndpoint+0x4ce>
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	441a      	add	r2, r3
 8004ee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	441a      	add	r2, r3
 8004f28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]
 8004f76:	e0ba      	b.n	80050ee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01d      	beq.n	8004fd0 <USB_ActivateEndpoint+0x5a8>
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fe0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01d      	beq.n	8005028 <USB_ActivateEndpoint+0x600>
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005024:	b29b      	uxth	r3, r3
 8005026:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	78db      	ldrb	r3, [r3, #3]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d024      	beq.n	800507a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005046:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800504a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800504e:	f083 0320 	eor.w	r3, r3, #32
 8005052:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005074:	b29b      	uxth	r3, r3
 8005076:	8013      	strh	r3, [r2, #0]
 8005078:	e01d      	b.n	80050b6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005090:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80050ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	376c      	adds	r7, #108	; 0x6c
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b08d      	sub	sp, #52	; 0x34
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	7b1b      	ldrb	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 808e 	bne.w	800522c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d044      	beq.n	80051a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	81bb      	strh	r3, [r7, #12]
 8005126:	89bb      	ldrh	r3, [r7, #12]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01b      	beq.n	8005168 <USB_DeactivateEndpoint+0x6c>
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	817b      	strh	r3, [r7, #10]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	897b      	ldrh	r3, [r7, #10]
 8005154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517e:	813b      	strh	r3, [r7, #8]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	441a      	add	r2, r3
 800518a:	893b      	ldrh	r3, [r7, #8]
 800518c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519c:	b29b      	uxth	r3, r3
 800519e:	8013      	strh	r3, [r2, #0]
 80051a0:	e192      	b.n	80054c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	827b      	strh	r3, [r7, #18]
 80051b0:	8a7b      	ldrh	r3, [r7, #18]
 80051b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <USB_DeactivateEndpoint+0xf6>
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	823b      	strh	r3, [r7, #16]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8a3b      	ldrh	r3, [r7, #16]
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	81fb      	strh	r3, [r7, #14]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	89fb      	ldrh	r3, [r7, #14]
 8005216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005226:	b29b      	uxth	r3, r3
 8005228:	8013      	strh	r3, [r2, #0]
 800522a:	e14d      	b.n	80054c8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f040 80a5 	bne.w	8005380 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	843b      	strh	r3, [r7, #32]
 8005244:	8c3b      	ldrh	r3, [r7, #32]
 8005246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01b      	beq.n	8005286 <USB_DeactivateEndpoint+0x18a>
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005264:	83fb      	strh	r3, [r7, #30]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	8bfb      	ldrh	r3, [r7, #30]
 8005272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800527e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	83bb      	strh	r3, [r7, #28]
 8005294:	8bbb      	ldrh	r3, [r7, #28]
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01b      	beq.n	80052d6 <USB_DeactivateEndpoint+0x1da>
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	837b      	strh	r3, [r7, #26]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	8b7b      	ldrh	r3, [r7, #26]
 80052c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ec:	833b      	strh	r3, [r7, #24]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	8b3b      	ldrh	r3, [r7, #24]
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	82fb      	strh	r3, [r7, #22]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	8afb      	ldrh	r3, [r7, #22]
 8005332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535c:	82bb      	strh	r3, [r7, #20]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	441a      	add	r2, r3
 8005368:	8abb      	ldrh	r3, [r7, #20]
 800536a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537a:	b29b      	uxth	r3, r3
 800537c:	8013      	strh	r3, [r2, #0]
 800537e:	e0a3      	b.n	80054c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800538e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <USB_DeactivateEndpoint+0x2d4>
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80053de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01b      	beq.n	8005420 <USB_DeactivateEndpoint+0x324>
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800547c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548c:	b29b      	uxth	r3, r3
 800548e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3734      	adds	r7, #52	; 0x34
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b0cc      	sub	sp, #304	; 0x130
 80054d8:	af00      	add	r7, sp, #0
 80054da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054e2:	6018      	str	r0, [r3, #0]
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ec:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	f041 817d 	bne.w	80067fa <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d908      	bls.n	800552e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800551c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800552c:	e007      	b.n	800553e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800552e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800553e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	7b1b      	ldrb	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d152      	bne.n	80055f4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6959      	ldr	r1, [r3, #20]
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	88da      	ldrh	r2, [r3, #6]
 8005566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556a:	b29b      	uxth	r3, r3
 800556c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005570:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005574:	6800      	ldr	r0, [r0, #0]
 8005576:	f001 ff23 	bl	80073c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800557a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005582:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005586:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	4619      	mov	r1, r3
 80055a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80055a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055ac:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	440a      	add	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	011a      	lsls	r2, r3, #4
 80055c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80055d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	f001 b8b5 	b.w	800675e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80055f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	78db      	ldrb	r3, [r3, #3]
 8005600:	2b02      	cmp	r3, #2
 8005602:	f040 84c6 	bne.w	8005f92 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	f240 8443 	bls.w	8005eaa <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800564e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800566c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005674:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005690:	1ad2      	subs	r2, r2, r3
 8005692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 823e 	beq.w	8005b42 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 809a 	bne.w	8005820 <USB_EPStartXfer+0x34c>
 80056ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800571e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	440a      	add	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	011a      	lsls	r2, r3, #4
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4413      	add	r3, r2
 8005742:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d122      	bne.n	800579e <USB_EPStartXfer+0x2ca>
 8005758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800576a:	b29a      	uxth	r2, r3
 800576c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005770:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578e:	b29a      	uxth	r2, r3
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	e079      	b.n	8005892 <USB_EPStartXfer+0x3be>
 800579e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a2:	2b3e      	cmp	r3, #62	; 0x3e
 80057a4:	d81b      	bhi.n	80057de <USB_EPStartXfer+0x30a>
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <USB_EPStartXfer+0x2f2>
 80057bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057c0:	3301      	adds	r3, #1
 80057c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e059      	b.n	8005892 <USB_EPStartXfer+0x3be>
 80057de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <USB_EPStartXfer+0x32a>
 80057f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057f8:	3b01      	subs	r3, #1
 80057fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005802:	b29b      	uxth	r3, r3
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	b29b      	uxth	r3, r3
 8005808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005810:	b29a      	uxth	r2, r3
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	e038      	b.n	8005892 <USB_EPStartXfer+0x3be>
 8005820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d130      	bne.n	8005892 <USB_EPStartXfer+0x3be>
 8005830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800584a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800584e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	440a      	add	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	011a      	lsls	r2, r3, #4
 8005866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4413      	add	r3, r2
 8005872:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005884:	b29a      	uxth	r2, r3
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	895b      	ldrh	r3, [r3, #10]
 800589e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6959      	ldr	r1, [r3, #20]
 80058ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058c0:	6800      	ldr	r0, [r0, #0]
 80058c2:	f001 fd7d 	bl	80073c0 <USB_WritePMA>
            ep->xfer_buff += len;
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d6:	441a      	add	r2, r3
 80058d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d90f      	bls.n	8005920 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005910:	1ad2      	subs	r2, r2, r3
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	621a      	str	r2, [r3, #32]
 800591e:	e00e      	b.n	800593e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800593e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 809a 	bne.w	8005a84 <USB_EPStartXfer+0x5b0>
 8005950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005954:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005958:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800595c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	4619      	mov	r1, r3
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800597e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005982:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	440a      	add	r2, r1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	011a      	lsls	r2, r3, #4
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d122      	bne.n	8005a02 <USB_EPStartXfer+0x52e>
 80059bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	e083      	b.n	8005b0a <USB_EPStartXfer+0x636>
 8005a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a06:	2b3e      	cmp	r3, #62	; 0x3e
 8005a08:	d81b      	bhi.n	8005a42 <USB_EPStartXfer+0x56e>
 8005a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <USB_EPStartXfer+0x556>
 8005a20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a24:	3301      	adds	r3, #1
 8005a26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	029b      	lsls	r3, r3, #10
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e063      	b.n	8005b0a <USB_EPStartXfer+0x636>
 8005a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <USB_EPStartXfer+0x58e>
 8005a58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e042      	b.n	8005b0a <USB_EPStartXfer+0x636>
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d13a      	bne.n	8005b0a <USB_EPStartXfer+0x636>
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aa0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ac2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ac6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	440a      	add	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	011a      	lsls	r2, r3, #4
 8005ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	891b      	ldrh	r3, [r3, #8]
 8005b16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6959      	ldr	r1, [r3, #20]
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b30:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b38:	6800      	ldr	r0, [r0, #0]
 8005b3a:	f001 fc41 	bl	80073c0 <USB_WritePMA>
 8005b3e:	f000 be0e 	b.w	800675e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d16d      	bne.n	8005c2e <USB_EPStartXfer+0x75a>
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b72:	4413      	add	r3, r2
 8005b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	011a      	lsls	r2, r3, #4
 8005b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b86:	4413      	add	r3, r2
 8005b88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d112      	bne.n	8005bbc <USB_EPStartXfer+0x6e8>
 8005b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	e063      	b.n	8005c84 <USB_EPStartXfer+0x7b0>
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8005bc2:	d817      	bhi.n	8005bf4 <USB_EPStartXfer+0x720>
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <USB_EPStartXfer+0x710>
 8005bda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bde:	3301      	adds	r3, #1
 8005be0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005be4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	029b      	lsls	r3, r3, #10
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e047      	b.n	8005c84 <USB_EPStartXfer+0x7b0>
 8005bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <USB_EPStartXfer+0x740>
 8005c0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	e02a      	b.n	8005c84 <USB_EPStartXfer+0x7b0>
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d122      	bne.n	8005c84 <USB_EPStartXfer+0x7b0>
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5e:	4413      	add	r3, r2
 8005c60:	653b      	str	r3, [r7, #80]	; 0x50
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	011a      	lsls	r2, r3, #4
 8005c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c72:	4413      	add	r3, r2
 8005c74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	891b      	ldrh	r3, [r3, #8]
 8005c90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6959      	ldr	r1, [r3, #20]
 8005ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005caa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cae:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cb2:	6800      	ldr	r0, [r0, #0]
 8005cb4:	f001 fb84 	bl	80073c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc8:	441a      	add	r2, r3
 8005cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a1a      	ldr	r2, [r3, #32]
 8005ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d90f      	bls.n	8005d12 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6a1a      	ldr	r2, [r3, #32]
 8005cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	621a      	str	r2, [r3, #32]
 8005d10:	e00e      	b.n	8005d30 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d16d      	bne.n	8005e28 <USB_EPStartXfer+0x954>
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	4413      	add	r3, r2
 8005d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	011a      	lsls	r2, r3, #4
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
 8005d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d112      	bne.n	8005db6 <USB_EPStartXfer+0x8e2>
 8005d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e05d      	b.n	8005e72 <USB_EPStartXfer+0x99e>
 8005db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dba:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbc:	d817      	bhi.n	8005dee <USB_EPStartXfer+0x91a>
 8005dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <USB_EPStartXfer+0x90a>
 8005dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	029b      	lsls	r3, r3, #10
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e041      	b.n	8005e72 <USB_EPStartXfer+0x99e>
 8005dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <USB_EPStartXfer+0x93a>
 8005e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	029b      	lsls	r3, r3, #10
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e024      	b.n	8005e72 <USB_EPStartXfer+0x99e>
 8005e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d11c      	bne.n	8005e72 <USB_EPStartXfer+0x99e>
 8005e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4c:	4413      	add	r3, r2
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	011a      	lsls	r2, r3, #4
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	895b      	ldrh	r3, [r3, #10]
 8005e7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6959      	ldr	r1, [r3, #20]
 8005e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ea0:	6800      	ldr	r0, [r0, #0]
 8005ea2:	f001 fa8d 	bl	80073c0 <USB_WritePMA>
 8005ea6:	f000 bc5a 	b.w	800675e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	441a      	add	r2, r3
 8005efe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f36:	4413      	add	r3, r2
 8005f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	011a      	lsls	r2, r3, #4
 8005f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f50:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	891b      	ldrh	r3, [r3, #8]
 8005f68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6959      	ldr	r1, [r3, #20]
 8005f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	f001 fa18 	bl	80073c0 <USB_WritePMA>
 8005f90:	e3e5      	b.n	800675e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6a1a      	ldr	r2, [r3, #32]
 8005ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800600c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 81bc 	beq.w	80063ac <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d16d      	bne.n	800612e <USB_EPStartXfer+0xc5a>
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	67bb      	str	r3, [r7, #120]	; 0x78
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606c:	b29b      	uxth	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006072:	4413      	add	r3, r2
 8006074:	67bb      	str	r3, [r7, #120]	; 0x78
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	011a      	lsls	r2, r3, #4
 8006084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006086:	4413      	add	r3, r2
 8006088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800608c:	677b      	str	r3, [r7, #116]	; 0x74
 800608e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d112      	bne.n	80060bc <USB_EPStartXfer+0xbe8>
 8006096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e060      	b.n	800617e <USB_EPStartXfer+0xcaa>
 80060bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c0:	2b3e      	cmp	r3, #62	; 0x3e
 80060c2:	d817      	bhi.n	80060f4 <USB_EPStartXfer+0xc20>
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <USB_EPStartXfer+0xc10>
 80060da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80060de:	3301      	adds	r3, #1
 80060e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e044      	b.n	800617e <USB_EPStartXfer+0xcaa>
 80060f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	2b00      	cmp	r3, #0
 8006108:	d104      	bne.n	8006114 <USB_EPStartXfer+0xc40>
 800610a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800610e:	3b01      	subs	r3, #1
 8006110:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006114:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006118:	b29b      	uxth	r3, r3
 800611a:	029b      	lsls	r3, r3, #10
 800611c:	b29b      	uxth	r3, r3
 800611e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006126:	b29a      	uxth	r2, r3
 8006128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	e027      	b.n	800617e <USB_EPStartXfer+0xcaa>
 800612e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	785b      	ldrb	r3, [r3, #1]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d11f      	bne.n	800617e <USB_EPStartXfer+0xcaa>
 800613e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006154:	4413      	add	r3, r2
 8006156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800615a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	011a      	lsls	r2, r3, #4
 8006168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800616c:	4413      	add	r3, r2
 800616e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006172:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006178:	b29a      	uxth	r2, r3
 800617a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800617c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800617e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	895b      	ldrh	r3, [r3, #10]
 800618a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6959      	ldr	r1, [r3, #20]
 800619a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f001 f907 	bl	80073c0 <USB_WritePMA>
          ep->xfer_buff += len;
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695a      	ldr	r2, [r3, #20]
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	441a      	add	r2, r3
 80061c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80061d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d90f      	bls.n	800620c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80061ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fc:	1ad2      	subs	r2, r2, r3
 80061fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	621a      	str	r2, [r3, #32]
 800620a:	e00e      	b.n	800622a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800621c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800622a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8295 	beq.w	800675e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	785b      	ldrb	r3, [r3, #1]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d16d      	bne.n	8006320 <USB_EPStartXfer+0xe4c>
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006264:	4413      	add	r3, r2
 8006266:	66bb      	str	r3, [r7, #104]	; 0x68
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	011a      	lsls	r2, r3, #4
 8006276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006278:	4413      	add	r3, r2
 800627a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800627e:	667b      	str	r3, [r7, #100]	; 0x64
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d112      	bne.n	80062ae <USB_EPStartXfer+0xdda>
 8006288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006292:	b29a      	uxth	r2, r3
 8006294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	e063      	b.n	8006376 <USB_EPStartXfer+0xea2>
 80062ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b2:	2b3e      	cmp	r3, #62	; 0x3e
 80062b4:	d817      	bhi.n	80062e6 <USB_EPStartXfer+0xe12>
 80062b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <USB_EPStartXfer+0xe02>
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	3301      	adds	r3, #1
 80062d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062da:	b29b      	uxth	r3, r3
 80062dc:	029b      	lsls	r3, r3, #10
 80062de:	b29a      	uxth	r2, r3
 80062e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	e047      	b.n	8006376 <USB_EPStartXfer+0xea2>
 80062e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <USB_EPStartXfer+0xe32>
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006300:	3b01      	subs	r3, #1
 8006302:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e02a      	b.n	8006376 <USB_EPStartXfer+0xea2>
 8006320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d122      	bne.n	8006376 <USB_EPStartXfer+0xea2>
 8006330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	673b      	str	r3, [r7, #112]	; 0x70
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006350:	4413      	add	r3, r2
 8006352:	673b      	str	r3, [r7, #112]	; 0x70
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	011a      	lsls	r2, r3, #4
 8006362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006364:	4413      	add	r3, r2
 8006366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800636a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800636c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006370:	b29a      	uxth	r2, r3
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	891b      	ldrh	r3, [r3, #8]
 8006382:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6959      	ldr	r1, [r3, #20]
 8006392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006396:	b29b      	uxth	r3, r3
 8006398:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800639c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063a4:	6800      	ldr	r0, [r0, #0]
 80063a6:	f001 f80b 	bl	80073c0 <USB_WritePMA>
 80063aa:	e1d8      	b.n	800675e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d178      	bne.n	80064ae <USB_EPStartXfer+0xfda>
 80063bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063e0:	4413      	add	r3, r2
 80063e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	011a      	lsls	r2, r3, #4
 80063f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f8:	4413      	add	r3, r2
 80063fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d116      	bne.n	8006438 <USB_EPStartXfer+0xf64>
 800640a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006416:	b29a      	uxth	r2, r3
 8006418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642e:	b29a      	uxth	r2, r3
 8006430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e06b      	b.n	8006510 <USB_EPStartXfer+0x103c>
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	2b3e      	cmp	r3, #62	; 0x3e
 800643e:	d818      	bhi.n	8006472 <USB_EPStartXfer+0xf9e>
 8006440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800644a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <USB_EPStartXfer+0xf8c>
 8006456:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800645a:	3301      	adds	r3, #1
 800645c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006460:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006464:	b29b      	uxth	r3, r3
 8006466:	029b      	lsls	r3, r3, #10
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e04e      	b.n	8006510 <USB_EPStartXfer+0x103c>
 8006472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800647c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <USB_EPStartXfer+0xfbe>
 8006488:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800648c:	3b01      	subs	r3, #1
 800648e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006492:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006496:	b29b      	uxth	r3, r3
 8006498:	029b      	lsls	r3, r3, #10
 800649a:	b29b      	uxth	r3, r3
 800649c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	e030      	b.n	8006510 <USB_EPStartXfer+0x103c>
 80064ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d128      	bne.n	8006510 <USB_EPStartXfer+0x103c>
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064e2:	4413      	add	r3, r2
 80064e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	011a      	lsls	r2, r3, #4
 80064f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064fa:	4413      	add	r3, r2
 80064fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800650e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	891b      	ldrh	r3, [r3, #8]
 800651c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6959      	ldr	r1, [r3, #20]
 800652c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006530:	b29b      	uxth	r3, r3
 8006532:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006536:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800653a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800653e:	6800      	ldr	r0, [r0, #0]
 8006540:	f000 ff3e 	bl	80073c0 <USB_WritePMA>
          ep->xfer_buff += len;
 8006544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695a      	ldr	r2, [r3, #20]
 8006550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006554:	441a      	add	r2, r3
 8006556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a1a      	ldr	r2, [r3, #32]
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	429a      	cmp	r2, r3
 800657c:	d90f      	bls.n	800659e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800657e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658e:	1ad2      	subs	r2, r2, r3
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	621a      	str	r2, [r3, #32]
 800659c:	e00e      	b.n	80065bc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800659e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80065ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2200      	movs	r2, #0
 80065ba:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80cc 	beq.w	800675e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d178      	bne.n	80066d6 <USB_EPStartXfer+0x1202>
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006608:	4413      	add	r3, r2
 800660a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800660e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	011a      	lsls	r2, r3, #4
 800661c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006620:	4413      	add	r3, r2
 8006622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800662a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d116      	bne.n	8006660 <USB_EPStartXfer+0x118c>
 8006632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	e064      	b.n	800672a <USB_EPStartXfer+0x1256>
 8006660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006664:	2b3e      	cmp	r3, #62	; 0x3e
 8006666:	d818      	bhi.n	800669a <USB_EPStartXfer+0x11c6>
 8006668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <USB_EPStartXfer+0x11b4>
 800667e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006682:	3301      	adds	r3, #1
 8006684:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668c:	b29b      	uxth	r3, r3
 800668e:	029b      	lsls	r3, r3, #10
 8006690:	b29a      	uxth	r2, r3
 8006692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e047      	b.n	800672a <USB_EPStartXfer+0x1256>
 800669a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <USB_EPStartXfer+0x11e6>
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066be:	b29b      	uxth	r3, r3
 80066c0:	029b      	lsls	r3, r3, #10
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e029      	b.n	800672a <USB_EPStartXfer+0x1256>
 80066d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d121      	bne.n	800672a <USB_EPStartXfer+0x1256>
 80066e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066fc:	4413      	add	r3, r2
 80066fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	011a      	lsls	r2, r3, #4
 8006710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006714:	4413      	add	r3, r2
 8006716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800671a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800671e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006728:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	895b      	ldrh	r3, [r3, #10]
 8006736:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800673a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6959      	ldr	r1, [r3, #20]
 8006746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674a:	b29b      	uxth	r3, r3
 800674c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006750:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006754:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006758:	6800      	ldr	r0, [r0, #0]
 800675a:	f000 fe31 	bl	80073c0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800675e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006780:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678c:	8013      	strh	r3, [r2, #0]
 800678e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006792:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006796:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800679a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800679e:	8812      	ldrh	r2, [r2, #0]
 80067a0:	f082 0210 	eor.w	r2, r2, #16
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067aa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80067ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067b2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80067b6:	8812      	ldrh	r2, [r2, #0]
 80067b8:	f082 0220 	eor.w	r2, r2, #32
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067dc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]
 80067f6:	f000 bc9f 	b.w	8007138 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	7b1b      	ldrb	r3, [r3, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 80ae 	bne.w	8006968 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800680c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699a      	ldr	r2, [r3, #24]
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d917      	bls.n	8006858 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006848:	1ad2      	subs	r2, r2, r3
 800684a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	619a      	str	r2, [r3, #24]
 8006856:	e00e      	b.n	8006876 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2200      	movs	r2, #0
 8006874:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800689a:	4413      	add	r3, r2
 800689c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	011a      	lsls	r2, r3, #4
 80068ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068b2:	4413      	add	r3, r2
 80068b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d116      	bne.n	80068f2 <USB_EPStartXfer+0x141e>
 80068c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ee:	801a      	strh	r2, [r3, #0]
 80068f0:	e3e8      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
 80068f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f6:	2b3e      	cmp	r3, #62	; 0x3e
 80068f8:	d818      	bhi.n	800692c <USB_EPStartXfer+0x1458>
 80068fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <USB_EPStartXfer+0x1446>
 8006910:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006914:	3301      	adds	r3, #1
 8006916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800691a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691e:	b29b      	uxth	r3, r3
 8006920:	029b      	lsls	r3, r3, #10
 8006922:	b29a      	uxth	r2, r3
 8006924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	e3cb      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
 800692c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <USB_EPStartXfer+0x1478>
 8006942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006946:	3b01      	subs	r3, #1
 8006948:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800694c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006950:	b29b      	uxth	r3, r3
 8006952:	029b      	lsls	r3, r3, #10
 8006954:	b29b      	uxth	r3, r3
 8006956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695e:	b29a      	uxth	r2, r3
 8006960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006964:	801a      	strh	r2, [r3, #0]
 8006966:	e3ad      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	78db      	ldrb	r3, [r3, #3]
 8006974:	2b02      	cmp	r3, #2
 8006976:	f040 8200 	bne.w	8006d7a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800697a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f040 8091 	bne.w	8006aae <USB_EPStartXfer+0x15da>
 800698c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800699a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069b0:	4413      	add	r3, r2
 80069b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	011a      	lsls	r2, r3, #4
 80069c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069c8:	4413      	add	r3, r2
 80069ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d116      	bne.n	8006a10 <USB_EPStartXfer+0x153c>
 80069e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e083      	b.n	8006b18 <USB_EPStartXfer+0x1644>
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a1e:	d820      	bhi.n	8006a62 <USB_EPStartXfer+0x158e>
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <USB_EPStartXfer+0x157c>
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e05a      	b.n	8006b18 <USB_EPStartXfer+0x1644>
 8006a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <USB_EPStartXfer+0x15be>
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	029b      	lsls	r3, r3, #10
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e034      	b.n	8006b18 <USB_EPStartXfer+0x1644>
 8006aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d12c      	bne.n	8006b18 <USB_EPStartXfer+0x1644>
 8006abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	011a      	lsls	r2, r3, #4
 8006af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 8091 	bne.w	8006c5a <USB_EPStartXfer+0x1786>
 8006b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	011a      	lsls	r2, r3, #4
 8006b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b74:	4413      	add	r3, r2
 8006b76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d116      	bne.n	8006bbc <USB_EPStartXfer+0x16e8>
 8006b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	e07c      	b.n	8006cb6 <USB_EPStartXfer+0x17e2>
 8006bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bca:	d820      	bhi.n	8006c0e <USB_EPStartXfer+0x173a>
 8006bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d004      	beq.n	8006bfc <USB_EPStartXfer+0x1728>
 8006bf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	029b      	lsls	r3, r3, #10
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e053      	b.n	8006cb6 <USB_EPStartXfer+0x17e2>
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <USB_EPStartXfer+0x176a>
 8006c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	029b      	lsls	r3, r3, #10
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	e02d      	b.n	8006cb6 <USB_EPStartXfer+0x17e2>
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	785b      	ldrb	r3, [r3, #1]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d125      	bne.n	8006cb6 <USB_EPStartXfer+0x17e2>
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c80:	4413      	add	r3, r2
 8006c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	011a      	lsls	r2, r3, #4
 8006c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c98:	4413      	add	r3, r2
 8006c9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cb4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 81fe 	beq.w	80070c4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ce8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <USB_EPStartXfer+0x182c>
 8006cf4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10d      	bne.n	8006d1c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d00:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f040 81db 	bne.w	80070c4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d0e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f040 81d4 	bne.w	80070c4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	441a      	add	r2, r3
 8006d60:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]
 8006d78:	e1a4      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	78db      	ldrb	r3, [r3, #3]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	f040 819a 	bne.w	80070c0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d917      	bls.n	8006dd8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699a      	ldr	r2, [r3, #24]
 8006dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	619a      	str	r2, [r3, #24]
 8006dd6:	e00e      	b.n	8006df6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d178      	bne.n	8006ef8 <USB_EPStartXfer+0x1a24>
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	011a      	lsls	r2, r3, #4
 8006e3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e42:	4413      	add	r3, r2
 8006e44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d116      	bne.n	8006e82 <USB_EPStartXfer+0x19ae>
 8006e54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e06b      	b.n	8006f5a <USB_EPStartXfer+0x1a86>
 8006e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e86:	2b3e      	cmp	r3, #62	; 0x3e
 8006e88:	d818      	bhi.n	8006ebc <USB_EPStartXfer+0x19e8>
 8006e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <USB_EPStartXfer+0x19d6>
 8006ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	029b      	lsls	r3, r3, #10
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	e04e      	b.n	8006f5a <USB_EPStartXfer+0x1a86>
 8006ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d104      	bne.n	8006edc <USB_EPStartXfer+0x1a08>
 8006ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	029b      	lsls	r3, r3, #10
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e030      	b.n	8006f5a <USB_EPStartXfer+0x1a86>
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d128      	bne.n	8006f5a <USB_EPStartXfer+0x1a86>
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	011a      	lsls	r2, r3, #4
 8006f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d178      	bne.n	800706a <USB_EPStartXfer+0x1b96>
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	011a      	lsls	r2, r3, #4
 8006fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d116      	bne.n	8006ff4 <USB_EPStartXfer+0x1b20>
 8006fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e067      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
 8006ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffa:	d818      	bhi.n	800702e <USB_EPStartXfer+0x1b5a>
 8006ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007000:	085b      	lsrs	r3, r3, #1
 8007002:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <USB_EPStartXfer+0x1b48>
 8007012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007016:	3301      	adds	r3, #1
 8007018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800701c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007020:	b29b      	uxth	r3, r3
 8007022:	029b      	lsls	r3, r3, #10
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	e04a      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
 800702e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <USB_EPStartXfer+0x1b7a>
 8007044:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007048:	3b01      	subs	r3, #1
 800704a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800704e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007052:	b29b      	uxth	r3, r3
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	b29b      	uxth	r3, r3
 8007058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e02c      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d124      	bne.n	80070c4 <USB_EPStartXfer+0x1bf0>
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	4413      	add	r3, r2
 8007092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	011a      	lsls	r2, r3, #4
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a8:	4413      	add	r3, r2
 80070aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e001      	b.n	80070c4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e03a      	b.n	800713a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80070ee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80070f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80070fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80070fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007102:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800712c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d020      	beq.n	8007198 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800716c:	81bb      	strh	r3, [r7, #12]
 800716e:	89bb      	ldrh	r3, [r7, #12]
 8007170:	f083 0310 	eor.w	r3, r3, #16
 8007174:	81bb      	strh	r3, [r7, #12]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	441a      	add	r2, r3
 8007180:	89bb      	ldrh	r3, [r7, #12]
 8007182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007192:	b29b      	uxth	r3, r3
 8007194:	8013      	strh	r3, [r2, #0]
 8007196:	e01f      	b.n	80071d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ae:	81fb      	strh	r3, [r7, #14]
 80071b0:	89fb      	ldrh	r3, [r7, #14]
 80071b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071b6:	81fb      	strh	r3, [r7, #14]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	89fb      	ldrh	r3, [r7, #14]
 80071c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	7b1b      	ldrb	r3, [r3, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 809d 	bne.w	8007332 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d04c      	beq.n	800729a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	823b      	strh	r3, [r7, #16]
 800720e:	8a3b      	ldrh	r3, [r7, #16]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01b      	beq.n	8007250 <USB_EPClearStall+0x6c>
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722e:	81fb      	strh	r3, [r7, #14]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	89fb      	ldrh	r3, [r7, #14]
 800723c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800724c:	b29b      	uxth	r3, r3
 800724e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	78db      	ldrb	r3, [r3, #3]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d06c      	beq.n	8007332 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726e:	81bb      	strh	r3, [r7, #12]
 8007270:	89bb      	ldrh	r3, [r7, #12]
 8007272:	f083 0320 	eor.w	r3, r3, #32
 8007276:	81bb      	strh	r3, [r7, #12]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	441a      	add	r2, r3
 8007282:	89bb      	ldrh	r3, [r7, #12]
 8007284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800728c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007294:	b29b      	uxth	r3, r3
 8007296:	8013      	strh	r3, [r2, #0]
 8007298:	e04b      	b.n	8007332 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	82fb      	strh	r3, [r7, #22]
 80072a8:	8afb      	ldrh	r3, [r7, #22]
 80072aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01b      	beq.n	80072ea <USB_EPClearStall+0x106>
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	82bb      	strh	r3, [r7, #20]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	8abb      	ldrh	r3, [r7, #20]
 80072d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007300:	827b      	strh	r3, [r7, #18]
 8007302:	8a7b      	ldrh	r3, [r7, #18]
 8007304:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007308:	827b      	strh	r3, [r7, #18]
 800730a:	8a7b      	ldrh	r3, [r7, #18]
 800730c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007310:	827b      	strh	r3, [r7, #18]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	441a      	add	r2, r3
 800731c:	8a7b      	ldrh	r3, [r7, #18]
 800731e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732e:	b29b      	uxth	r3, r3
 8007330:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d103      	bne.n	8007358 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2280      	movs	r2, #128	; 0x80
 8007354:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr

0800738c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800739a:	b29b      	uxth	r3, r3
 800739c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr

080073aa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr

080073c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b08d      	sub	sp, #52	; 0x34
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4611      	mov	r1, r2
 80073cc:	461a      	mov	r2, r3
 80073ce:	460b      	mov	r3, r1
 80073d0:	80fb      	strh	r3, [r7, #6]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80073d6:	88bb      	ldrh	r3, [r7, #4]
 80073d8:	3301      	adds	r3, #1
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	005a      	lsls	r2, r3, #1
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f8:	e01e      	b.n	8007438 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	3301      	adds	r3, #1
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	b29b      	uxth	r3, r3
 8007410:	461a      	mov	r2, r3
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	b29a      	uxth	r2, r3
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	3302      	adds	r3, #2
 8007424:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	3302      	adds	r3, #2
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	3301      	adds	r3, #1
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	3b01      	subs	r3, #1
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1dd      	bne.n	80073fa <USB_WritePMA+0x3a>
  }
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	3734      	adds	r7, #52	; 0x34
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800744a:	b480      	push	{r7}
 800744c:	b08b      	sub	sp, #44	; 0x2c
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	4611      	mov	r1, r2
 8007456:	461a      	mov	r2, r3
 8007458:	460b      	mov	r3, r1
 800745a:	80fb      	strh	r3, [r7, #6]
 800745c:	4613      	mov	r3, r2
 800745e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007460:	88bb      	ldrh	r3, [r7, #4]
 8007462:	085b      	lsrs	r3, r3, #1
 8007464:	b29b      	uxth	r3, r3
 8007466:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	005a      	lsls	r2, r3, #1
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800747c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
 8007482:	e01b      	b.n	80074bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	3302      	adds	r3, #2
 8007490:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3301      	adds	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	3301      	adds	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	3302      	adds	r3, #2
 80074b4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	3b01      	subs	r3, #1
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e0      	bne.n	8007484 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80074c2:	88bb      	ldrh	r3, [r7, #4]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	701a      	strb	r2, [r3, #0]
  }
}
 80074de:	bf00      	nop
 80074e0:	372c      	adds	r7, #44	; 0x2c
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	7c1b      	ldrb	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d115      	bne.n	800752c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007504:	2202      	movs	r2, #2
 8007506:	2181      	movs	r1, #129	; 0x81
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 fe86 	bl	800921a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007518:	2202      	movs	r2, #2
 800751a:	2101      	movs	r1, #1
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fe7c 	bl	800921a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800752a:	e012      	b.n	8007552 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	2202      	movs	r2, #2
 8007530:	2181      	movs	r1, #129	; 0x81
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fe71 	bl	800921a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800753e:	2340      	movs	r3, #64	; 0x40
 8007540:	2202      	movs	r2, #2
 8007542:	2101      	movs	r1, #1
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fe68 	bl	800921a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007552:	2308      	movs	r3, #8
 8007554:	2203      	movs	r2, #3
 8007556:	2182      	movs	r1, #130	; 0x82
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fe5e 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007564:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007568:	f001 ff7e 	bl	8009468 <USBD_static_malloc>
 800756c:	4602      	mov	r2, r0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d102      	bne.n	8007584 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800757e:	2301      	movs	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	e026      	b.n	80075d2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7c1b      	ldrb	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d109      	bne.n	80075c2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075b8:	2101      	movs	r1, #1
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 ff1e 	bl	80093fc <USBD_LL_PrepareReceive>
 80075c0:	e007      	b.n	80075d2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075c8:	2340      	movs	r3, #64	; 0x40
 80075ca:	2101      	movs	r1, #1
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 ff15 	bl	80093fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80075ec:	2181      	movs	r1, #129	; 0x81
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fe39 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075fa:	2101      	movs	r1, #1
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fe32 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800760a:	2182      	movs	r1, #130	; 0x82
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fe2a 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00e      	beq.n	8007640 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007632:	4618      	mov	r0, r3
 8007634:	f001 ff24 	bl	8009480 <USBD_static_free>
    pdev->pClassData = NULL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007670:	2b00      	cmp	r3, #0
 8007672:	d039      	beq.n	80076e8 <USBD_CDC_Setup+0x9e>
 8007674:	2b20      	cmp	r3, #32
 8007676:	d17f      	bne.n	8007778 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	88db      	ldrh	r3, [r3, #6]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d029      	beq.n	80076d4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	b25b      	sxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	da11      	bge.n	80076ae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007696:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	88d2      	ldrh	r2, [r2, #6]
 800769c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800769e:	6939      	ldr	r1, [r7, #16]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fa09 	bl	8008abe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80076ac:	e06b      	b.n	8007786 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	785a      	ldrb	r2, [r3, #1]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	88db      	ldrh	r3, [r3, #6]
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076c4:	6939      	ldr	r1, [r7, #16]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	88db      	ldrh	r3, [r3, #6]
 80076ca:	461a      	mov	r2, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 fa24 	bl	8008b1a <USBD_CtlPrepareRx>
      break;
 80076d2:	e058      	b.n	8007786 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	7850      	ldrb	r0, [r2, #1]
 80076e0:	2200      	movs	r2, #0
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	4798      	blx	r3
      break;
 80076e6:	e04e      	b.n	8007786 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	785b      	ldrb	r3, [r3, #1]
 80076ec:	2b0b      	cmp	r3, #11
 80076ee:	d02e      	beq.n	800774e <USBD_CDC_Setup+0x104>
 80076f0:	2b0b      	cmp	r3, #11
 80076f2:	dc38      	bgt.n	8007766 <USBD_CDC_Setup+0x11c>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <USBD_CDC_Setup+0xb4>
 80076f8:	2b0a      	cmp	r3, #10
 80076fa:	d014      	beq.n	8007726 <USBD_CDC_Setup+0xdc>
 80076fc:	e033      	b.n	8007766 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	2b03      	cmp	r3, #3
 8007706:	d107      	bne.n	8007718 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007708:	f107 030c 	add.w	r3, r7, #12
 800770c:	2202      	movs	r2, #2
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 f9d4 	bl	8008abe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007716:	e02e      	b.n	8007776 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f965 	bl	80089ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007720:	2302      	movs	r3, #2
 8007722:	75fb      	strb	r3, [r7, #23]
          break;
 8007724:	e027      	b.n	8007776 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772c:	2b03      	cmp	r3, #3
 800772e:	d107      	bne.n	8007740 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007730:	f107 030f 	add.w	r3, r7, #15
 8007734:	2201      	movs	r2, #1
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f9c0 	bl	8008abe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800773e:	e01a      	b.n	8007776 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f951 	bl	80089ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007748:	2302      	movs	r3, #2
 800774a:	75fb      	strb	r3, [r7, #23]
          break;
 800774c:	e013      	b.n	8007776 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	2b03      	cmp	r3, #3
 8007756:	d00d      	beq.n	8007774 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 f945 	bl	80089ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007760:	2302      	movs	r3, #2
 8007762:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007764:	e006      	b.n	8007774 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f93e 	bl	80089ea <USBD_CtlError>
          ret = USBD_FAIL;
 800776e:	2302      	movs	r3, #2
 8007770:	75fb      	strb	r3, [r7, #23]
          break;
 8007772:	e000      	b.n	8007776 <USBD_CDC_Setup+0x12c>
          break;
 8007774:	bf00      	nop
      }
      break;
 8007776:	e006      	b.n	8007786 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 f935 	bl	80089ea <USBD_CtlError>
      ret = USBD_FAIL;
 8007780:	2302      	movs	r3, #2
 8007782:	75fb      	strb	r3, [r7, #23]
      break;
 8007784:	bf00      	nop
  }

  return ret;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077aa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d03a      	beq.n	800782c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	331c      	adds	r3, #28
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d029      	beq.n	8007820 <USBD_CDC_DataIn+0x90>
 80077cc:	78fa      	ldrb	r2, [r7, #3]
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	331c      	adds	r3, #28
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	78f9      	ldrb	r1, [r7, #3]
 80077e0:	68b8      	ldr	r0, [r7, #8]
 80077e2:	460b      	mov	r3, r1
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4403      	add	r3, r0
 80077ec:	3338      	adds	r3, #56	; 0x38
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d110      	bne.n	8007820 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	331c      	adds	r3, #28
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007812:	78f9      	ldrb	r1, [r7, #3]
 8007814:	2300      	movs	r3, #0
 8007816:	2200      	movs	r2, #0
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fdcc 	bl	80093b6 <USBD_LL_Transmit>
 800781e:	e003      	b.n	8007828 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e000      	b.n	800782e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800782c:	2302      	movs	r3, #2
  }
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007848:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fdf7 	bl	8009442 <USBD_LL_GetRxDataSize>
 8007854:	4602      	mov	r2, r0
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800787a:	4611      	mov	r1, r2
 800787c:	4798      	blx	r3

    return USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e000      	b.n	8007884 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d015      	beq.n	80078d2 <USBD_CDC_EP0_RxReady+0x46>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078ac:	2bff      	cmp	r3, #255	; 0xff
 80078ae:	d010      	beq.n	80078d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80078be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078c6:	b292      	uxth	r2, r2
 80078c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	22ff      	movs	r2, #255	; 0xff
 80078ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2243      	movs	r2, #67	; 0x43
 80078e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80078ea:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc80      	pop	{r7}
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000094 	.word	0x20000094

080078fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2243      	movs	r2, #67	; 0x43
 8007908:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800790a:	4b03      	ldr	r3, [pc, #12]	; (8007918 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20000050 	.word	0x20000050

0800791c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2243      	movs	r2, #67	; 0x43
 8007928:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800792a:	4b03      	ldr	r3, [pc, #12]	; (8007938 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200000d8 	.word	0x200000d8

0800793c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	220a      	movs	r2, #10
 8007948:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800794a:	4b03      	ldr	r3, [pc, #12]	; (8007958 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	2000000c 	.word	0x2000000c

0800795c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007966:	2302      	movs	r3, #2
 8007968:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr

08007988 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr

080079ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	bc80      	pop	{r7}
 80079de:	4770      	bx	lr

080079e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01c      	beq.n	8007a34 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d115      	bne.n	8007a30 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2181      	movs	r1, #129	; 0x81
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fcc5 	bl	80093b6 <USBD_LL_Transmit>

      return USBD_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e002      	b.n	8007a36 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d017      	beq.n	8007a88 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7c1b      	ldrb	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fcc5 	bl	80093fc <USBD_LL_PrepareReceive>
 8007a72:	e007      	b.n	8007a84 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a7a:	2340      	movs	r3, #64	; 0x40
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fcbc 	bl	80093fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e000      	b.n	8007a8a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e01a      	b.n	8007ae0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	79fa      	ldrb	r2, [r7, #7]
 8007ad6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f001 fb29 	bl	8009130 <USBD_LL_Init>

  return USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d006      	beq.n	8007b0a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73fb      	strb	r3, [r7, #15]
 8007b08:	e001      	b.n	8007b0e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fb5e 	bl	80091e4 <USBD_LL_Start>

  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr

08007b46 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	460b      	mov	r3, r1
 8007b50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	78fa      	ldrb	r2, [r7, #3]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fed8 	bl	8008972 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d016      	beq.n	8007c14 <USBD_LL_SetupStage+0x6a>
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d81c      	bhi.n	8007c24 <USBD_LL_SetupStage+0x7a>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <USBD_LL_SetupStage+0x4a>
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d008      	beq.n	8007c04 <USBD_LL_SetupStage+0x5a>
 8007bf2:	e017      	b.n	8007c24 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f9cb 	bl	8007f98 <USBD_StdDevReq>
      break;
 8007c02:	e01a      	b.n	8007c3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fa2d 	bl	800806c <USBD_StdItfReq>
      break;
 8007c12:	e012      	b.n	8007c3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fa6d 	bl	80080fc <USBD_StdEPReq>
      break;
 8007c22:	e00a      	b.n	8007c3a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fb36 	bl	80092a4 <USBD_LL_StallEP>
      break;
 8007c38:	bf00      	nop
  }

  return USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c52:	7afb      	ldrb	r3, [r7, #11]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d14b      	bne.n	8007cf0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c5e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d134      	bne.n	8007cd4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d919      	bls.n	8007caa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d203      	bcs.n	8007c98 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	e002      	b.n	8007c9e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 ff57 	bl	8008b56 <USBD_CtlContinueRx>
 8007ca8:	e038      	b.n	8007d1c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d105      	bne.n	8007ccc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 ff54 	bl	8008b7a <USBD_CtlSendStatus>
 8007cd2:	e023      	b.n	8007d1c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cda:	2b05      	cmp	r3, #5
 8007cdc:	d11e      	bne.n	8007d1c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f001 fadb 	bl	80092a4 <USBD_LL_StallEP>
 8007cee:	e015      	b.n	8007d1c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00d      	beq.n	8007d18 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d108      	bne.n	8007d18 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	7afa      	ldrb	r2, [r7, #11]
 8007d10:	4611      	mov	r1, r2
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	4798      	blx	r3
 8007d16:	e001      	b.n	8007d1c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e000      	b.n	8007d1e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d17f      	bne.n	8007e3a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3314      	adds	r3, #20
 8007d3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d15c      	bne.n	8007e04 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d915      	bls.n	8007d82 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fec1 	bl	8008af6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d74:	2300      	movs	r3, #0
 8007d76:	2200      	movs	r2, #0
 8007d78:	2100      	movs	r1, #0
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f001 fb3e 	bl	80093fc <USBD_LL_PrepareReceive>
 8007d80:	e04e      	b.n	8007e20 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	6912      	ldr	r2, [r2, #16]
 8007d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d8e:	fb01 f202 	mul.w	r2, r1, r2
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11c      	bne.n	8007dd2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d316      	bcc.n	8007dd2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d20f      	bcs.n	8007dd2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fe9d 	bl	8008af6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f001 fb16 	bl	80093fc <USBD_LL_PrepareReceive>
 8007dd0:	e026      	b.n	8007e20 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d105      	bne.n	8007df4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007df4:	2180      	movs	r1, #128	; 0x80
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f001 fa54 	bl	80092a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fecf 	bl	8008ba0 <USBD_CtlReceiveStatus>
 8007e02:	e00d      	b.n	8007e20 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d004      	beq.n	8007e18 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e18:	2180      	movs	r1, #128	; 0x80
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f001 fa42 	bl	80092a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d11d      	bne.n	8007e66 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff fe81 	bl	8007b32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e38:	e015      	b.n	8007e66 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00d      	beq.n	8007e62 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d108      	bne.n	8007e62 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	7afa      	ldrb	r2, [r7, #11]
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	4798      	blx	r3
 8007e60:	e001      	b.n	8007e66 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e62:	2302      	movs	r3, #2
 8007e64:	e000      	b.n	8007e68 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e78:	2340      	movs	r3, #64	; 0x40
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 f9cb 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2240      	movs	r2, #64	; 0x40
 8007e90:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	2200      	movs	r2, #0
 8007e98:	2180      	movs	r1, #128	; 0x80
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 f9bd 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2240      	movs	r2, #64	; 0x40
 8007eaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6852      	ldr	r2, [r2, #4]
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
  }

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2204      	movs	r2, #4
 8007f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d105      	bne.n	8007f56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr

08007f62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d10b      	bne.n	8007f8c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d005      	beq.n	8007fbe <USBD_StdDevReq+0x26>
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d84f      	bhi.n	8008056 <USBD_StdDevReq+0xbe>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <USBD_StdDevReq+0x36>
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d14b      	bne.n	8008056 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4798      	blx	r3
      break;
 8007fcc:	e048      	b.n	8008060 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	d839      	bhi.n	800804a <USBD_StdDevReq+0xb2>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <USBD_StdDevReq+0x44>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	0800802d 	.word	0x0800802d
 8007fe0:	08008041 	.word	0x08008041
 8007fe4:	0800804b 	.word	0x0800804b
 8007fe8:	08008037 	.word	0x08008037
 8007fec:	0800804b 	.word	0x0800804b
 8007ff0:	0800800f 	.word	0x0800800f
 8007ff4:	08008005 	.word	0x08008005
 8007ff8:	0800804b 	.word	0x0800804b
 8007ffc:	08008023 	.word	0x08008023
 8008000:	08008019 	.word	0x08008019
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9dc 	bl	80083c4 <USBD_GetDescriptor>
          break;
 800800c:	e022      	b.n	8008054 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fb3f 	bl	8008694 <USBD_SetAddress>
          break;
 8008016:	e01d      	b.n	8008054 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb7e 	bl	800871c <USBD_SetConfig>
          break;
 8008020:	e018      	b.n	8008054 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc07 	bl	8008838 <USBD_GetConfig>
          break;
 800802a:	e013      	b.n	8008054 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fc37 	bl	80088a2 <USBD_GetStatus>
          break;
 8008034:	e00e      	b.n	8008054 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc65 	bl	8008908 <USBD_SetFeature>
          break;
 800803e:	e009      	b.n	8008054 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fc74 	bl	8008930 <USBD_ClrFeature>
          break;
 8008048:	e004      	b.n	8008054 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fccc 	bl	80089ea <USBD_CtlError>
          break;
 8008052:	bf00      	nop
      }
      break;
 8008054:	e004      	b.n	8008060 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fcc6 	bl	80089ea <USBD_CtlError>
      break;
 800805e:	bf00      	nop
  }

  return ret;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop

0800806c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d005      	beq.n	8008092 <USBD_StdItfReq+0x26>
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d82e      	bhi.n	80080e8 <USBD_StdItfReq+0x7c>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <USBD_StdItfReq+0x26>
 800808e:	2b20      	cmp	r3, #32
 8008090:	d12a      	bne.n	80080e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	3b01      	subs	r3, #1
 800809a:	2b02      	cmp	r3, #2
 800809c:	d81d      	bhi.n	80080da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	889b      	ldrh	r3, [r3, #4]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d813      	bhi.n	80080d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	88db      	ldrh	r3, [r3, #6]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d110      	bne.n	80080e4 <USBD_StdItfReq+0x78>
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10d      	bne.n	80080e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fd56 	bl	8008b7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080ce:	e009      	b.n	80080e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fc89 	bl	80089ea <USBD_CtlError>
          break;
 80080d8:	e004      	b.n	80080e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fc84 	bl	80089ea <USBD_CtlError>
          break;
 80080e2:	e000      	b.n	80080e6 <USBD_StdItfReq+0x7a>
          break;
 80080e4:	bf00      	nop
      }
      break;
 80080e6:	e004      	b.n	80080f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fc7d 	bl	80089ea <USBD_CtlError>
      break;
 80080f0:	bf00      	nop
  }

  return USBD_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	889b      	ldrh	r3, [r3, #4]
 800810e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008118:	2b40      	cmp	r3, #64	; 0x40
 800811a:	d007      	beq.n	800812c <USBD_StdEPReq+0x30>
 800811c:	2b40      	cmp	r3, #64	; 0x40
 800811e:	f200 8146 	bhi.w	80083ae <USBD_StdEPReq+0x2b2>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <USBD_StdEPReq+0x40>
 8008126:	2b20      	cmp	r3, #32
 8008128:	f040 8141 	bne.w	80083ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
      break;
 800813a:	e13d      	b.n	80083b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008144:	2b20      	cmp	r3, #32
 8008146:	d10a      	bne.n	800815e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]

        return ret;
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	e12d      	b.n	80083ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b03      	cmp	r3, #3
 8008164:	d007      	beq.n	8008176 <USBD_StdEPReq+0x7a>
 8008166:	2b03      	cmp	r3, #3
 8008168:	f300 811b 	bgt.w	80083a2 <USBD_StdEPReq+0x2a6>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d072      	beq.n	8008256 <USBD_StdEPReq+0x15a>
 8008170:	2b01      	cmp	r3, #1
 8008172:	d03a      	beq.n	80081ea <USBD_StdEPReq+0xee>
 8008174:	e115      	b.n	80083a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	2b02      	cmp	r3, #2
 800817e:	d002      	beq.n	8008186 <USBD_StdEPReq+0x8a>
 8008180:	2b03      	cmp	r3, #3
 8008182:	d015      	beq.n	80081b0 <USBD_StdEPReq+0xb4>
 8008184:	e02b      	b.n	80081de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00c      	beq.n	80081a6 <USBD_StdEPReq+0xaa>
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b80      	cmp	r3, #128	; 0x80
 8008190:	d009      	beq.n	80081a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f884 	bl	80092a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 f880 	bl	80092a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a4:	e020      	b.n	80081e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fc1e 	bl	80089ea <USBD_CtlError>
              break;
 80081ae:	e01b      	b.n	80081e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10e      	bne.n	80081d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <USBD_StdEPReq+0xda>
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b80      	cmp	r3, #128	; 0x80
 80081c2:	d008      	beq.n	80081d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	88db      	ldrh	r3, [r3, #6]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d104      	bne.n	80081d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 f867 	bl	80092a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fccf 	bl	8008b7a <USBD_CtlSendStatus>

              break;
 80081dc:	e004      	b.n	80081e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc02 	bl	80089ea <USBD_CtlError>
              break;
 80081e6:	bf00      	nop
          }
          break;
 80081e8:	e0e0      	b.n	80083ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d002      	beq.n	80081fa <USBD_StdEPReq+0xfe>
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d015      	beq.n	8008224 <USBD_StdEPReq+0x128>
 80081f8:	e026      	b.n	8008248 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <USBD_StdEPReq+0x11e>
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b80      	cmp	r3, #128	; 0x80
 8008204:	d009      	beq.n	800821a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 f84a 	bl	80092a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008210:	2180      	movs	r1, #128	; 0x80
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 f846 	bl	80092a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008218:	e01c      	b.n	8008254 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fbe4 	bl	80089ea <USBD_CtlError>
              break;
 8008222:	e017      	b.n	8008254 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	885b      	ldrh	r3, [r3, #2]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d112      	bne.n	8008252 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 f851 	bl	80092e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc9a 	bl	8008b7a <USBD_CtlSendStatus>
              }
              break;
 8008246:	e004      	b.n	8008252 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fbcd 	bl	80089ea <USBD_CtlError>
              break;
 8008250:	e000      	b.n	8008254 <USBD_StdEPReq+0x158>
              break;
 8008252:	bf00      	nop
          }
          break;
 8008254:	e0aa      	b.n	80083ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825c:	2b02      	cmp	r3, #2
 800825e:	d002      	beq.n	8008266 <USBD_StdEPReq+0x16a>
 8008260:	2b03      	cmp	r3, #3
 8008262:	d032      	beq.n	80082ca <USBD_StdEPReq+0x1ce>
 8008264:	e097      	b.n	8008396 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <USBD_StdEPReq+0x180>
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	2b80      	cmp	r3, #128	; 0x80
 8008270:	d004      	beq.n	800827c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fbb8 	bl	80089ea <USBD_CtlError>
                break;
 800827a:	e091      	b.n	80083a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800827c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008280:	2b00      	cmp	r3, #0
 8008282:	da0b      	bge.n	800829c <USBD_StdEPReq+0x1a0>
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	3310      	adds	r3, #16
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	4413      	add	r3, r2
 8008298:	3304      	adds	r3, #4
 800829a:	e00b      	b.n	80082b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	3304      	adds	r3, #4
 80082b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2202      	movs	r2, #2
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fbfb 	bl	8008abe <USBD_CtlSendData>
              break;
 80082c8:	e06a      	b.n	80083a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	da11      	bge.n	80082f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	f003 020f 	and.w	r2, r3, #15
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	3318      	adds	r3, #24
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d117      	bne.n	800831c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fb7b 	bl	80089ea <USBD_CtlError>
                  break;
 80082f4:	e054      	b.n	80083a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	f003 020f 	and.w	r2, r3, #15
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d104      	bne.n	800831c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb68 	bl	80089ea <USBD_CtlError>
                  break;
 800831a:	e041      	b.n	80083a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800831c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008320:	2b00      	cmp	r3, #0
 8008322:	da0b      	bge.n	800833c <USBD_StdEPReq+0x240>
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	3310      	adds	r3, #16
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	e00b      	b.n	8008354 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <USBD_StdEPReq+0x266>
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	2b80      	cmp	r3, #128	; 0x80
 8008360:	d103      	bne.n	800836a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	e00e      	b.n	8008388 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 ffd6 	bl	8009320 <USBD_LL_IsStallEP>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e002      	b.n	8008388 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2202      	movs	r2, #2
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fb95 	bl	8008abe <USBD_CtlSendData>
              break;
 8008394:	e004      	b.n	80083a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fb26 	bl	80089ea <USBD_CtlError>
              break;
 800839e:	bf00      	nop
          }
          break;
 80083a0:	e004      	b.n	80083ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fb20 	bl	80089ea <USBD_CtlError>
          break;
 80083aa:	bf00      	nop
      }
      break;
 80083ac:	e004      	b.n	80083b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fb1a 	bl	80089ea <USBD_CtlError>
      break;
 80083b6:	bf00      	nop
  }

  return ret;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	885b      	ldrh	r3, [r3, #2]
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	2b06      	cmp	r3, #6
 80083e6:	f200 8128 	bhi.w	800863a <USBD_GetDescriptor+0x276>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <USBD_GetDescriptor+0x2c>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	0800840d 	.word	0x0800840d
 80083f4:	08008425 	.word	0x08008425
 80083f8:	08008465 	.word	0x08008465
 80083fc:	0800863b 	.word	0x0800863b
 8008400:	0800863b 	.word	0x0800863b
 8008404:	080085db 	.word	0x080085db
 8008408:	08008607 	.word	0x08008607
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
      break;
 8008422:	e112      	b.n	800864a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	7c1b      	ldrb	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10d      	bne.n	8008448 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	f107 0208 	add.w	r2, r7, #8
 8008438:	4610      	mov	r0, r2
 800843a:	4798      	blx	r3
 800843c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3301      	adds	r3, #1
 8008442:	2202      	movs	r2, #2
 8008444:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008446:	e100      	b.n	800864a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	f107 0208 	add.w	r2, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	2202      	movs	r2, #2
 8008460:	701a      	strb	r2, [r3, #0]
      break;
 8008462:	e0f2      	b.n	800864a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	885b      	ldrh	r3, [r3, #2]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b05      	cmp	r3, #5
 800846c:	f200 80ac 	bhi.w	80085c8 <USBD_GetDescriptor+0x204>
 8008470:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <USBD_GetDescriptor+0xb4>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	08008491 	.word	0x08008491
 800847c:	080084c5 	.word	0x080084c5
 8008480:	080084f9 	.word	0x080084f9
 8008484:	0800852d 	.word	0x0800852d
 8008488:	08008561 	.word	0x08008561
 800848c:	08008595 	.word	0x08008595
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00b      	beq.n	80084b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	7c12      	ldrb	r2, [r2, #16]
 80084a8:	f107 0108 	add.w	r1, r7, #8
 80084ac:	4610      	mov	r0, r2
 80084ae:	4798      	blx	r3
 80084b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084b2:	e091      	b.n	80085d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa97 	bl	80089ea <USBD_CtlError>
            err++;
 80084bc:	7afb      	ldrb	r3, [r7, #11]
 80084be:	3301      	adds	r3, #1
 80084c0:	72fb      	strb	r3, [r7, #11]
          break;
 80084c2:	e089      	b.n	80085d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	7c12      	ldrb	r2, [r2, #16]
 80084dc:	f107 0108 	add.w	r1, r7, #8
 80084e0:	4610      	mov	r0, r2
 80084e2:	4798      	blx	r3
 80084e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084e6:	e077      	b.n	80085d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa7d 	bl	80089ea <USBD_CtlError>
            err++;
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	3301      	adds	r3, #1
 80084f4:	72fb      	strb	r3, [r7, #11]
          break;
 80084f6:	e06f      	b.n	80085d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	7c12      	ldrb	r2, [r2, #16]
 8008510:	f107 0108 	add.w	r1, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851a:	e05d      	b.n	80085d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa63 	bl	80089ea <USBD_CtlError>
            err++;
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	3301      	adds	r3, #1
 8008528:	72fb      	strb	r3, [r7, #11]
          break;
 800852a:	e055      	b.n	80085d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	7c12      	ldrb	r2, [r2, #16]
 8008544:	f107 0108 	add.w	r1, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800854e:	e043      	b.n	80085d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa49 	bl	80089ea <USBD_CtlError>
            err++;
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	3301      	adds	r3, #1
 800855c:	72fb      	strb	r3, [r7, #11]
          break;
 800855e:	e03b      	b.n	80085d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00b      	beq.n	8008584 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008582:	e029      	b.n	80085d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa2f 	bl	80089ea <USBD_CtlError>
            err++;
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	3301      	adds	r3, #1
 8008590:	72fb      	strb	r3, [r7, #11]
          break;
 8008592:	e021      	b.n	80085d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	7c12      	ldrb	r2, [r2, #16]
 80085ac:	f107 0108 	add.w	r1, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b6:	e00f      	b.n	80085d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fa15 	bl	80089ea <USBD_CtlError>
            err++;
 80085c0:	7afb      	ldrb	r3, [r7, #11]
 80085c2:	3301      	adds	r3, #1
 80085c4:	72fb      	strb	r3, [r7, #11]
          break;
 80085c6:	e007      	b.n	80085d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa0d 	bl	80089ea <USBD_CtlError>
          err++;
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	3301      	adds	r3, #1
 80085d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80085d6:	e038      	b.n	800864a <USBD_GetDescriptor+0x286>
 80085d8:	e037      	b.n	800864a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	7c1b      	ldrb	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	f107 0208 	add.w	r2, r7, #8
 80085ee:	4610      	mov	r0, r2
 80085f0:	4798      	blx	r3
 80085f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085f4:	e029      	b.n	800864a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f9f6 	bl	80089ea <USBD_CtlError>
        err++;
 80085fe:	7afb      	ldrb	r3, [r7, #11]
 8008600:	3301      	adds	r3, #1
 8008602:	72fb      	strb	r3, [r7, #11]
      break;
 8008604:	e021      	b.n	800864a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7c1b      	ldrb	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10d      	bne.n	800862a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f107 0208 	add.w	r2, r7, #8
 800861a:	4610      	mov	r0, r2
 800861c:	4798      	blx	r3
 800861e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	2207      	movs	r2, #7
 8008626:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008628:	e00f      	b.n	800864a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f9dc 	bl	80089ea <USBD_CtlError>
        err++;
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	3301      	adds	r3, #1
 8008636:	72fb      	strb	r3, [r7, #11]
      break;
 8008638:	e007      	b.n	800864a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f9d4 	bl	80089ea <USBD_CtlError>
      err++;
 8008642:	7afb      	ldrb	r3, [r7, #11]
 8008644:	3301      	adds	r3, #1
 8008646:	72fb      	strb	r3, [r7, #11]
      break;
 8008648:	bf00      	nop
  }

  if (err != 0U)
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d11c      	bne.n	800868a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008650:	893b      	ldrh	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d011      	beq.n	800867a <USBD_GetDescriptor+0x2b6>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	88db      	ldrh	r3, [r3, #6]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	88da      	ldrh	r2, [r3, #6]
 8008662:	893b      	ldrh	r3, [r7, #8]
 8008664:	4293      	cmp	r3, r2
 8008666:	bf28      	it	cs
 8008668:	4613      	movcs	r3, r2
 800866a:	b29b      	uxth	r3, r3
 800866c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800866e:	893b      	ldrh	r3, [r7, #8]
 8008670:	461a      	mov	r2, r3
 8008672:	68f9      	ldr	r1, [r7, #12]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fa22 	bl	8008abe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88db      	ldrh	r3, [r3, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d104      	bne.n	800868c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa79 	bl	8008b7a <USBD_CtlSendStatus>
 8008688:	e000      	b.n	800868c <USBD_GetDescriptor+0x2c8>
    return;
 800868a:	bf00      	nop
    }
  }
}
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop

08008694 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	889b      	ldrh	r3, [r3, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d130      	bne.n	8008708 <USBD_SetAddress+0x74>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	88db      	ldrh	r3, [r3, #6]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d12c      	bne.n	8008708 <USBD_SetAddress+0x74>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	885b      	ldrh	r3, [r3, #2]
 80086b2:	2b7f      	cmp	r3, #127	; 0x7f
 80086b4:	d828      	bhi.n	8008708 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d104      	bne.n	80086d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f98b 	bl	80089ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d4:	e01d      	b.n	8008712 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	7bfa      	ldrb	r2, [r7, #15]
 80086da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fe48 	bl	8009378 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa46 	bl	8008b7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fc:	e009      	b.n	8008712 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008706:	e004      	b.n	8008712 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f96d 	bl	80089ea <USBD_CtlError>
  }
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	885b      	ldrh	r3, [r3, #2]
 800872a:	b2da      	uxtb	r2, r3
 800872c:	4b41      	ldr	r3, [pc, #260]	; (8008834 <USBD_SetConfig+0x118>)
 800872e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008730:	4b40      	ldr	r3, [pc, #256]	; (8008834 <USBD_SetConfig+0x118>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d904      	bls.n	8008742 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f955 	bl	80089ea <USBD_CtlError>
 8008740:	e075      	b.n	800882e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008748:	2b02      	cmp	r3, #2
 800874a:	d002      	beq.n	8008752 <USBD_SetConfig+0x36>
 800874c:	2b03      	cmp	r3, #3
 800874e:	d023      	beq.n	8008798 <USBD_SetConfig+0x7c>
 8008750:	e062      	b.n	8008818 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008752:	4b38      	ldr	r3, [pc, #224]	; (8008834 <USBD_SetConfig+0x118>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01a      	beq.n	8008790 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800875a:	4b36      	ldr	r3, [pc, #216]	; (8008834 <USBD_SetConfig+0x118>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2203      	movs	r2, #3
 8008768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800876c:	4b31      	ldr	r3, [pc, #196]	; (8008834 <USBD_SetConfig+0x118>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff f9e7 	bl	8007b46 <USBD_SetClassConfig>
 8008778:	4603      	mov	r3, r0
 800877a:	2b02      	cmp	r3, #2
 800877c:	d104      	bne.n	8008788 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f932 	bl	80089ea <USBD_CtlError>
            return;
 8008786:	e052      	b.n	800882e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f9f6 	bl	8008b7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800878e:	e04e      	b.n	800882e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9f2 	bl	8008b7a <USBD_CtlSendStatus>
        break;
 8008796:	e04a      	b.n	800882e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008798:	4b26      	ldr	r3, [pc, #152]	; (8008834 <USBD_SetConfig+0x118>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d112      	bne.n	80087c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80087a8:	4b22      	ldr	r3, [pc, #136]	; (8008834 <USBD_SetConfig+0x118>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80087b2:	4b20      	ldr	r3, [pc, #128]	; (8008834 <USBD_SetConfig+0x118>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff f9e3 	bl	8007b84 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f9db 	bl	8008b7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087c4:	e033      	b.n	800882e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087c6:	4b1b      	ldr	r3, [pc, #108]	; (8008834 <USBD_SetConfig+0x118>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d01d      	beq.n	8008810 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff f9d1 	bl	8007b84 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80087e2:	4b14      	ldr	r3, [pc, #80]	; (8008834 <USBD_SetConfig+0x118>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087ec:	4b11      	ldr	r3, [pc, #68]	; (8008834 <USBD_SetConfig+0x118>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff f9a7 	bl	8007b46 <USBD_SetClassConfig>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d104      	bne.n	8008808 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f8f2 	bl	80089ea <USBD_CtlError>
            return;
 8008806:	e012      	b.n	800882e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9b6 	bl	8008b7a <USBD_CtlSendStatus>
        break;
 800880e:	e00e      	b.n	800882e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f9b2 	bl	8008b7a <USBD_CtlSendStatus>
        break;
 8008816:	e00a      	b.n	800882e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f8e5 	bl	80089ea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008820:	4b04      	ldr	r3, [pc, #16]	; (8008834 <USBD_SetConfig+0x118>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff f9ac 	bl	8007b84 <USBD_ClrClassConfig>
        break;
 800882c:	bf00      	nop
    }
  }
}
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20003684 	.word	0x20003684

08008838 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	88db      	ldrh	r3, [r3, #6]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d004      	beq.n	8008854 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f8cc 	bl	80089ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008852:	e022      	b.n	800889a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885a:	2b02      	cmp	r3, #2
 800885c:	dc02      	bgt.n	8008864 <USBD_GetConfig+0x2c>
 800885e:	2b00      	cmp	r3, #0
 8008860:	dc03      	bgt.n	800886a <USBD_GetConfig+0x32>
 8008862:	e015      	b.n	8008890 <USBD_GetConfig+0x58>
 8008864:	2b03      	cmp	r3, #3
 8008866:	d00b      	beq.n	8008880 <USBD_GetConfig+0x48>
 8008868:	e012      	b.n	8008890 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3308      	adds	r3, #8
 8008874:	2201      	movs	r2, #1
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f920 	bl	8008abe <USBD_CtlSendData>
        break;
 800887e:	e00c      	b.n	800889a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3304      	adds	r3, #4
 8008884:	2201      	movs	r2, #1
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f918 	bl	8008abe <USBD_CtlSendData>
        break;
 800888e:	e004      	b.n	800889a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f8a9 	bl	80089ea <USBD_CtlError>
        break;
 8008898:	bf00      	nop
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b2:	3b01      	subs	r3, #1
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d81e      	bhi.n	80088f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	88db      	ldrh	r3, [r3, #6]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d004      	beq.n	80088ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f891 	bl	80089ea <USBD_CtlError>
        break;
 80088c8:	e01a      	b.n	8008900 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d005      	beq.n	80088e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f043 0202 	orr.w	r2, r3, #2
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	330c      	adds	r3, #12
 80088ea:	2202      	movs	r2, #2
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f8e5 	bl	8008abe <USBD_CtlSendData>
      break;
 80088f4:	e004      	b.n	8008900 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f876 	bl	80089ea <USBD_CtlError>
      break;
 80088fe:	bf00      	nop
  }
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d106      	bne.n	8008928 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f929 	bl	8008b7a <USBD_CtlSendStatus>
  }
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008940:	3b01      	subs	r3, #1
 8008942:	2b02      	cmp	r3, #2
 8008944:	d80b      	bhi.n	800895e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	885b      	ldrh	r3, [r3, #2]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d10c      	bne.n	8008968 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f90f 	bl	8008b7a <USBD_CtlSendStatus>
      }
      break;
 800895c:	e004      	b.n	8008968 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f842 	bl	80089ea <USBD_CtlError>
      break;
 8008966:	e000      	b.n	800896a <USBD_ClrFeature+0x3a>
      break;
 8008968:	bf00      	nop
  }
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781a      	ldrb	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	785a      	ldrb	r2, [r3, #1]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	3302      	adds	r3, #2
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b29a      	uxth	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	3303      	adds	r3, #3
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	b29b      	uxth	r3, r3
 80089a0:	4413      	add	r3, r2
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	3304      	adds	r3, #4
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	3305      	adds	r3, #5
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4413      	add	r3, r2
 80089be:	b29a      	uxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3306      	adds	r3, #6
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	3307      	adds	r3, #7
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4413      	add	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	80da      	strh	r2, [r3, #6]

}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bc80      	pop	{r7}
 80089e8:	4770      	bx	lr

080089ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80089f4:	2180      	movs	r1, #128	; 0x80
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fc54 	bl	80092a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80089fc:	2100      	movs	r1, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fc50 	bl	80092a4 <USBD_LL_StallEP>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d032      	beq.n	8008a88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f834 	bl	8008a90 <USBD_GetLen>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	75fa      	strb	r2, [r7, #23]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	7812      	ldrb	r2, [r2, #0]
 8008a46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	75fa      	strb	r2, [r7, #23]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4413      	add	r3, r2
 8008a54:	2203      	movs	r2, #3
 8008a56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a58:	e012      	b.n	8008a80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	60fa      	str	r2, [r7, #12]
 8008a60:	7dfa      	ldrb	r2, [r7, #23]
 8008a62:	1c51      	adds	r1, r2, #1
 8008a64:	75f9      	strb	r1, [r7, #23]
 8008a66:	4611      	mov	r1, r2
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	75fa      	strb	r2, [r7, #23]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e8      	bne.n	8008a5a <USBD_GetString+0x4e>
    }
  }
}
 8008a88:	bf00      	nop
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a9c:	e005      	b.n	8008aaa <USBD_GetLen+0x1a>
  {
    len++;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f5      	bne.n	8008a9e <USBD_GetLen+0xe>
  }

  return len;
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr

08008abe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ad4:	88fa      	ldrh	r2, [r7, #6]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ada:	88fa      	ldrh	r2, [r7, #6]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ae0:	88fb      	ldrh	r3, [r7, #6]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fc65 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	4613      	mov	r3, r2
 8008b02:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	2100      	movs	r1, #0
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fc53 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	4613      	mov	r3, r2
 8008b26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2203      	movs	r2, #3
 8008b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b30:	88fa      	ldrh	r2, [r7, #6]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b38:	88fa      	ldrh	r2, [r7, #6]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	2100      	movs	r1, #0
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fc58 	bl	80093fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	4613      	mov	r3, r2
 8008b62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	2100      	movs	r1, #0
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fc46 	bl	80093fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2204      	movs	r2, #4
 8008b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc10 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2205      	movs	r2, #5
 8008bac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fc20 	bl	80093fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4912      	ldr	r1, [pc, #72]	; (8008c18 <MX_USB_DEVICE_Init+0x50>)
 8008bd0:	4812      	ldr	r0, [pc, #72]	; (8008c1c <MX_USB_DEVICE_Init+0x54>)
 8008bd2:	f7fe ff5e 	bl	8007a92 <USBD_Init>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bdc:	f7f7 fd02 	bl	80005e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008be0:	490f      	ldr	r1, [pc, #60]	; (8008c20 <MX_USB_DEVICE_Init+0x58>)
 8008be2:	480e      	ldr	r0, [pc, #56]	; (8008c1c <MX_USB_DEVICE_Init+0x54>)
 8008be4:	f7fe ff80 	bl	8007ae8 <USBD_RegisterClass>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bee:	f7f7 fcf9 	bl	80005e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bf2:	490c      	ldr	r1, [pc, #48]	; (8008c24 <MX_USB_DEVICE_Init+0x5c>)
 8008bf4:	4809      	ldr	r0, [pc, #36]	; (8008c1c <MX_USB_DEVICE_Init+0x54>)
 8008bf6:	f7fe feb1 	bl	800795c <USBD_CDC_RegisterInterface>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c00:	f7f7 fcf0 	bl	80005e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c04:	4805      	ldr	r0, [pc, #20]	; (8008c1c <MX_USB_DEVICE_Init+0x54>)
 8008c06:	f7fe ff88 	bl	8007b1a <USBD_Start>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c10:	f7f7 fce8 	bl	80005e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c14:	bf00      	nop
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	2000012c 	.word	0x2000012c
 8008c1c:	20003688 	.word	0x20003688
 8008c20:	20000018 	.word	0x20000018
 8008c24:	2000011c 	.word	0x2000011c

08008c28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4905      	ldr	r1, [pc, #20]	; (8008c44 <CDC_Init_FS+0x1c>)
 8008c30:	4805      	ldr	r0, [pc, #20]	; (8008c48 <CDC_Init_FS+0x20>)
 8008c32:	f7fe fea9 	bl	8007988 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c36:	4905      	ldr	r1, [pc, #20]	; (8008c4c <CDC_Init_FS+0x24>)
 8008c38:	4803      	ldr	r0, [pc, #12]	; (8008c48 <CDC_Init_FS+0x20>)
 8008c3a:	f7fe febe 	bl	80079ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	2000398c 	.word	0x2000398c
 8008c48:	20003688 	.word	0x20003688
 8008c4c:	2000394c 	.word	0x2000394c

08008c50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr
	...

08008c60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	71fb      	strb	r3, [r7, #7]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	2b23      	cmp	r3, #35	; 0x23
 8008c74:	d84a      	bhi.n	8008d0c <CDC_Control_FS+0xac>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <CDC_Control_FS+0x1c>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008d0d 	.word	0x08008d0d
 8008c80:	08008d0d 	.word	0x08008d0d
 8008c84:	08008d0d 	.word	0x08008d0d
 8008c88:	08008d0d 	.word	0x08008d0d
 8008c8c:	08008d0d 	.word	0x08008d0d
 8008c90:	08008d0d 	.word	0x08008d0d
 8008c94:	08008d0d 	.word	0x08008d0d
 8008c98:	08008d0d 	.word	0x08008d0d
 8008c9c:	08008d0d 	.word	0x08008d0d
 8008ca0:	08008d0d 	.word	0x08008d0d
 8008ca4:	08008d0d 	.word	0x08008d0d
 8008ca8:	08008d0d 	.word	0x08008d0d
 8008cac:	08008d0d 	.word	0x08008d0d
 8008cb0:	08008d0d 	.word	0x08008d0d
 8008cb4:	08008d0d 	.word	0x08008d0d
 8008cb8:	08008d0d 	.word	0x08008d0d
 8008cbc:	08008d0d 	.word	0x08008d0d
 8008cc0:	08008d0d 	.word	0x08008d0d
 8008cc4:	08008d0d 	.word	0x08008d0d
 8008cc8:	08008d0d 	.word	0x08008d0d
 8008ccc:	08008d0d 	.word	0x08008d0d
 8008cd0:	08008d0d 	.word	0x08008d0d
 8008cd4:	08008d0d 	.word	0x08008d0d
 8008cd8:	08008d0d 	.word	0x08008d0d
 8008cdc:	08008d0d 	.word	0x08008d0d
 8008ce0:	08008d0d 	.word	0x08008d0d
 8008ce4:	08008d0d 	.word	0x08008d0d
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d0d 	.word	0x08008d0d
 8008cf0:	08008d0d 	.word	0x08008d0d
 8008cf4:	08008d0d 	.word	0x08008d0d
 8008cf8:	08008d0d 	.word	0x08008d0d
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d0d 	.word	0x08008d0d
 8008d04:	08008d0d 	.word	0x08008d0d
 8008d08:	08008d0d 	.word	0x08008d0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d0c:	bf00      	nop
  }

  return (USBD_OK);
 8008d0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop

08008d1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <CDC_Receive_FS+0x24>)
 8008d2a:	f7fe fe46 	bl	80079ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d2e:	4804      	ldr	r0, [pc, #16]	; (8008d40 <CDC_Receive_FS+0x24>)
 8008d30:	f7fe fe85 	bl	8007a3e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20003688 	.word	0x20003688

08008d44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d54:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <CDC_Transmit_FS+0x48>)
 8008d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e00b      	b.n	8008d82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d6a:	887b      	ldrh	r3, [r7, #2]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4806      	ldr	r0, [pc, #24]	; (8008d8c <CDC_Transmit_FS+0x48>)
 8008d72:	f7fe fe09 	bl	8007988 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d76:	4805      	ldr	r0, [pc, #20]	; (8008d8c <CDC_Transmit_FS+0x48>)
 8008d78:	f7fe fe32 	bl	80079e0 <USBD_CDC_TransmitPacket>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20003688 	.word	0x20003688

08008d90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	6039      	str	r1, [r7, #0]
 8008d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2212      	movs	r2, #18
 8008da0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008da2:	4b03      	ldr	r3, [pc, #12]	; (8008db0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bc80      	pop	{r7}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	20000148 	.word	0x20000148

08008db4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dc6:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	2000015c 	.word	0x2000015c

08008dd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d105      	bne.n	8008df6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	4907      	ldr	r1, [pc, #28]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008dee:	4808      	ldr	r0, [pc, #32]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008df0:	f7ff fe0c 	bl	8008a0c <USBD_GetString>
 8008df4:	e004      	b.n	8008e00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	4904      	ldr	r1, [pc, #16]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008dfa:	4805      	ldr	r0, [pc, #20]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dfc:	f7ff fe06 	bl	8008a0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e00:	4b02      	ldr	r3, [pc, #8]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	200039cc 	.word	0x200039cc
 8008e10:	08009580 	.word	0x08009580

08008e14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	4904      	ldr	r1, [pc, #16]	; (8008e34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e24:	4804      	ldr	r0, [pc, #16]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e26:	f7ff fdf1 	bl	8008a0c <USBD_GetString>
  return USBD_StrDesc;
 8008e2a:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	200039cc 	.word	0x200039cc
 8008e38:	0800959c 	.word	0x0800959c

08008e3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	221a      	movs	r2, #26
 8008e4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e4e:	f000 f843 	bl	8008ed8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e52:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20000160 	.word	0x20000160

08008e60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	4907      	ldr	r1, [pc, #28]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e76:	4808      	ldr	r0, [pc, #32]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e78:	f7ff fdc8 	bl	8008a0c <USBD_GetString>
 8008e7c:	e004      	b.n	8008e88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4904      	ldr	r1, [pc, #16]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e82:	4805      	ldr	r0, [pc, #20]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e84:	f7ff fdc2 	bl	8008a0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e88:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	200039cc 	.word	0x200039cc
 8008e98:	080095b0 	.word	0x080095b0

08008e9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d105      	bne.n	8008eba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4907      	ldr	r1, [pc, #28]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb4:	f7ff fdaa 	bl	8008a0c <USBD_GetString>
 8008eb8:	e004      	b.n	8008ec4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4904      	ldr	r1, [pc, #16]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ebe:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ec0:	f7ff fda4 	bl	8008a0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	200039cc 	.word	0x200039cc
 8008ed4:	080095bc 	.word	0x080095bc

08008ed8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ede:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <Get_SerialNum+0x44>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <Get_SerialNum+0x48>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eea:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <Get_SerialNum+0x4c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008efe:	2208      	movs	r2, #8
 8008f00:	4909      	ldr	r1, [pc, #36]	; (8008f28 <Get_SerialNum+0x50>)
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 f814 	bl	8008f30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f08:	2204      	movs	r2, #4
 8008f0a:	4908      	ldr	r1, [pc, #32]	; (8008f2c <Get_SerialNum+0x54>)
 8008f0c:	68b8      	ldr	r0, [r7, #8]
 8008f0e:	f000 f80f 	bl	8008f30 <IntToUnicode>
  }
}
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	1ffff7e8 	.word	0x1ffff7e8
 8008f20:	1ffff7ec 	.word	0x1ffff7ec
 8008f24:	1ffff7f0 	.word	0x1ffff7f0
 8008f28:	20000162 	.word	0x20000162
 8008f2c:	20000172 	.word	0x20000172

08008f30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]
 8008f46:	e027      	b.n	8008f98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	0f1b      	lsrs	r3, r3, #28
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d80b      	bhi.n	8008f68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	0f1b      	lsrs	r3, r3, #28
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	440b      	add	r3, r1
 8008f60:	3230      	adds	r2, #48	; 0x30
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e00a      	b.n	8008f7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	0f1b      	lsrs	r3, r3, #28
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	4619      	mov	r1, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	440b      	add	r3, r1
 8008f78:	3237      	adds	r2, #55	; 0x37
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	3301      	adds	r3, #1
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	3301      	adds	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
 8008f98:	7dfa      	ldrb	r2, [r7, #23]
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d3d3      	bcc.n	8008f48 <IntToUnicode+0x18>
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bc80      	pop	{r7}
 8008faa:	4770      	bx	lr

08008fac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0d      	ldr	r2, [pc, #52]	; (8008ff0 <HAL_PCD_MspInit+0x44>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d113      	bne.n	8008fe6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <HAL_PCD_MspInit+0x48>)
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	4a0c      	ldr	r2, [pc, #48]	; (8008ff4 <HAL_PCD_MspInit+0x48>)
 8008fc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fc8:	61d3      	str	r3, [r2, #28]
 8008fca:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <HAL_PCD_MspInit+0x48>)
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	2014      	movs	r0, #20
 8008fdc:	f7f8 f9dd 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008fe0:	2014      	movs	r0, #20
 8008fe2:	f7f8 f9f6 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	40005c00 	.word	0x40005c00
 8008ff4:	40021000 	.word	0x40021000

08008ff8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fe fdcb 	bl	8007baa <USBD_LL_SetupStage>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	440b      	add	r3, r1
 800903c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	78fb      	ldrb	r3, [r7, #3]
 8009044:	4619      	mov	r1, r3
 8009046:	f7fe fdfd 	bl	8007c44 <USBD_LL_DataOutStage>
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	440b      	add	r3, r1
 8009072:	333c      	adds	r3, #60	; 0x3c
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	4619      	mov	r1, r3
 800907a:	f7fe fe54 	bl	8007d26 <USBD_LL_DataInStage>
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe ff64 	bl	8007f62 <USBD_LL_SOF>
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090aa:	2301      	movs	r3, #1
 80090ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d001      	beq.n	80090ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090b6:	f7f7 fa95 	bl	80005e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090c0:	7bfa      	ldrb	r2, [r7, #15]
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe ff14 	bl	8007ef2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fecd 	bl	8007e70 <USBD_LL_Reset>
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe ff0e 	bl	8007f10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <HAL_PCD_SuspendCallback+0x30>)
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	4a03      	ldr	r2, [pc, #12]	; (8009110 <HAL_PCD_SuspendCallback+0x30>)
 8009102:	f043 0306 	orr.w	r3, r3, #6
 8009106:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	e000ed00 	.word	0xe000ed00

08009114 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe ff08 	bl	8007f38 <USBD_LL_Resume>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009138:	4a28      	ldr	r2, [pc, #160]	; (80091dc <USBD_LL_Init+0xac>)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a26      	ldr	r2, [pc, #152]	; (80091dc <USBD_LL_Init+0xac>)
 8009144:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009148:	4b24      	ldr	r3, [pc, #144]	; (80091dc <USBD_LL_Init+0xac>)
 800914a:	4a25      	ldr	r2, [pc, #148]	; (80091e0 <USBD_LL_Init+0xb0>)
 800914c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800914e:	4b23      	ldr	r3, [pc, #140]	; (80091dc <USBD_LL_Init+0xac>)
 8009150:	2208      	movs	r2, #8
 8009152:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009154:	4b21      	ldr	r3, [pc, #132]	; (80091dc <USBD_LL_Init+0xac>)
 8009156:	2202      	movs	r2, #2
 8009158:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800915a:	4b20      	ldr	r3, [pc, #128]	; (80091dc <USBD_LL_Init+0xac>)
 800915c:	2200      	movs	r2, #0
 800915e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009160:	4b1e      	ldr	r3, [pc, #120]	; (80091dc <USBD_LL_Init+0xac>)
 8009162:	2200      	movs	r2, #0
 8009164:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009166:	4b1d      	ldr	r3, [pc, #116]	; (80091dc <USBD_LL_Init+0xac>)
 8009168:	2200      	movs	r2, #0
 800916a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800916c:	481b      	ldr	r0, [pc, #108]	; (80091dc <USBD_LL_Init+0xac>)
 800916e:	f7f8 fcf7 	bl	8001b60 <HAL_PCD_Init>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009178:	f7f7 fa34 	bl	80005e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009182:	2318      	movs	r3, #24
 8009184:	2200      	movs	r2, #0
 8009186:	2100      	movs	r1, #0
 8009188:	f7fa f96b 	bl	8003462 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009192:	2358      	movs	r3, #88	; 0x58
 8009194:	2200      	movs	r2, #0
 8009196:	2180      	movs	r1, #128	; 0x80
 8009198:	f7fa f963 	bl	8003462 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091a2:	23c0      	movs	r3, #192	; 0xc0
 80091a4:	2200      	movs	r2, #0
 80091a6:	2181      	movs	r1, #129	; 0x81
 80091a8:	f7fa f95b 	bl	8003462 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091b6:	2200      	movs	r2, #0
 80091b8:	2101      	movs	r1, #1
 80091ba:	f7fa f952 	bl	8003462 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091c8:	2200      	movs	r2, #0
 80091ca:	2182      	movs	r1, #130	; 0x82
 80091cc:	f7fa f949 	bl	8003462 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	20003bcc 	.word	0x20003bcc
 80091e0:	40005c00 	.word	0x40005c00

080091e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f8 fdbb 	bl	8001d76 <HAL_PCD_Start>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f94e 	bl	80094a8 <USBD_Get_USB_Status>
 800920c:	4603      	mov	r3, r0
 800920e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009210:	7bbb      	ldrb	r3, [r7, #14]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	461a      	mov	r2, r3
 8009228:	4603      	mov	r3, r0
 800922a:	70fb      	strb	r3, [r7, #3]
 800922c:	460b      	mov	r3, r1
 800922e:	70bb      	strb	r3, [r7, #2]
 8009230:	4613      	mov	r3, r2
 8009232:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009242:	78bb      	ldrb	r3, [r7, #2]
 8009244:	883a      	ldrh	r2, [r7, #0]
 8009246:	78f9      	ldrb	r1, [r7, #3]
 8009248:	f7f8 ff33 	bl	80020b2 <HAL_PCD_EP_Open>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f928 	bl	80094a8 <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009280:	78fa      	ldrb	r2, [r7, #3]
 8009282:	4611      	mov	r1, r2
 8009284:	4618      	mov	r0, r3
 8009286:	f7f8 ff7a 	bl	800217e <HAL_PCD_EP_Close>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f909 	bl	80094a8 <USBD_Get_USB_Status>
 8009296:	4603      	mov	r3, r0
 8009298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800929a:	7bbb      	ldrb	r3, [r7, #14]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f9 f83a 	bl	800233c <HAL_PCD_EP_SetStall>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f8ea 	bl	80094a8 <USBD_Get_USB_Status>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7f9 f87b 	bl	80023fc <HAL_PCD_EP_ClrStall>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f8cb 	bl	80094a8 <USBD_Get_USB_Status>
 8009312:	4603      	mov	r3, r0
 8009314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009316:	7bbb      	ldrb	r3, [r7, #14]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009332:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009338:	2b00      	cmp	r3, #0
 800933a:	da0c      	bge.n	8009356 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009342:	68f9      	ldr	r1, [r7, #12]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	440b      	add	r3, r1
 8009350:	3302      	adds	r3, #2
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	e00b      	b.n	800936e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935c:	68f9      	ldr	r1, [r7, #12]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	440b      	add	r3, r1
 8009368:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800936c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr

08009378 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7f8 fe66 	bl	8002068 <HAL_PCD_SetAddress>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f880 	bl	80094a8 <USBD_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	461a      	mov	r2, r3
 80093c2:	460b      	mov	r3, r1
 80093c4:	72fb      	strb	r3, [r7, #11]
 80093c6:	4613      	mov	r3, r2
 80093c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093d8:	893b      	ldrh	r3, [r7, #8]
 80093da:	7af9      	ldrb	r1, [r7, #11]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	f7f8 ff6a 	bl	80022b6 <HAL_PCD_EP_Transmit>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f85d 	bl	80094a8 <USBD_Get_USB_Status>
 80093ee:	4603      	mov	r3, r0
 80093f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	607a      	str	r2, [r7, #4]
 8009406:	461a      	mov	r2, r3
 8009408:	460b      	mov	r3, r1
 800940a:	72fb      	strb	r3, [r7, #11]
 800940c:	4613      	mov	r3, r2
 800940e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800941e:	893b      	ldrh	r3, [r7, #8]
 8009420:	7af9      	ldrb	r1, [r7, #11]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	f7f8 fef3 	bl	800220e <HAL_PCD_EP_Receive>
 8009428:	4603      	mov	r3, r0
 800942a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f83a 	bl	80094a8 <USBD_Get_USB_Status>
 8009434:	4603      	mov	r3, r0
 8009436:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009438:	7dbb      	ldrb	r3, [r7, #22]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	460b      	mov	r3, r1
 800944c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f7f8 ff15 	bl	8002288 <HAL_PCD_EP_GetRxCount>
 800945e:	4603      	mov	r3, r0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009470:	4b02      	ldr	r3, [pc, #8]	; (800947c <USBD_static_malloc+0x14>)
}
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr
 800947c:	20003eb8 	.word	0x20003eb8

08009480 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]

}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	bc80      	pop	{r7}
 8009490:	4770      	bx	lr

08009492 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr

080094a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d817      	bhi.n	80094ec <USBD_Get_USB_Status+0x44>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <USBD_Get_USB_Status+0x1c>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094db 	.word	0x080094db
 80094cc:	080094e1 	.word	0x080094e1
 80094d0:	080094e7 	.word	0x080094e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
    break;
 80094d8:	e00b      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094da:	2302      	movs	r3, #2
 80094dc:	73fb      	strb	r3, [r7, #15]
    break;
 80094de:	e008      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
    break;
 80094e4:	e005      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094e6:	2302      	movs	r3, #2
 80094e8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ea:	e002      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094ec:	2302      	movs	r3, #2
 80094ee:	73fb      	strb	r3, [r7, #15]
    break;
 80094f0:	bf00      	nop
  }
  return usb_status;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop

08009500 <__libc_init_array>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	2600      	movs	r6, #0
 8009504:	4d0c      	ldr	r5, [pc, #48]	; (8009538 <__libc_init_array+0x38>)
 8009506:	4c0d      	ldr	r4, [pc, #52]	; (800953c <__libc_init_array+0x3c>)
 8009508:	1b64      	subs	r4, r4, r5
 800950a:	10a4      	asrs	r4, r4, #2
 800950c:	42a6      	cmp	r6, r4
 800950e:	d109      	bne.n	8009524 <__libc_init_array+0x24>
 8009510:	f000 f822 	bl	8009558 <_init>
 8009514:	2600      	movs	r6, #0
 8009516:	4d0a      	ldr	r5, [pc, #40]	; (8009540 <__libc_init_array+0x40>)
 8009518:	4c0a      	ldr	r4, [pc, #40]	; (8009544 <__libc_init_array+0x44>)
 800951a:	1b64      	subs	r4, r4, r5
 800951c:	10a4      	asrs	r4, r4, #2
 800951e:	42a6      	cmp	r6, r4
 8009520:	d105      	bne.n	800952e <__libc_init_array+0x2e>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f855 3b04 	ldr.w	r3, [r5], #4
 8009528:	4798      	blx	r3
 800952a:	3601      	adds	r6, #1
 800952c:	e7ee      	b.n	800950c <__libc_init_array+0xc>
 800952e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009532:	4798      	blx	r3
 8009534:	3601      	adds	r6, #1
 8009536:	e7f2      	b.n	800951e <__libc_init_array+0x1e>
 8009538:	080095e4 	.word	0x080095e4
 800953c:	080095e4 	.word	0x080095e4
 8009540:	080095e4 	.word	0x080095e4
 8009544:	080095e8 	.word	0x080095e8

08009548 <memset>:
 8009548:	4603      	mov	r3, r0
 800954a:	4402      	add	r2, r0
 800954c:	4293      	cmp	r3, r2
 800954e:	d100      	bne.n	8009552 <memset+0xa>
 8009550:	4770      	bx	lr
 8009552:	f803 1b01 	strb.w	r1, [r3], #1
 8009556:	e7f9      	b.n	800954c <memset+0x4>

08009558 <_init>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	bf00      	nop
 800955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955e:	bc08      	pop	{r3}
 8009560:	469e      	mov	lr, r3
 8009562:	4770      	bx	lr

08009564 <_fini>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr
